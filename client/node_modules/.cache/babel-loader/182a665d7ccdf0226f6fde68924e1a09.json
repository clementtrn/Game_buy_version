{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hugod\\\\d\\xE9citude\\\\client\\\\src\\\\components\\\\Grille.js\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Grille.css';\nimport Piece from \"./pieces/Piece\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grille = ({\n  nbColonnes,\n  nbLignes,\n  carte,\n  position,\n  mursH,\n  mursV\n}) => {\n  const getDistance = (min, max) => {\n    return Math.sqrt((min[0] - max[0]) * (min[0] - max[0]) + (min[1] - max[1]) * (min[1] - max[1]));\n  };\n\n  const associate = (minimums, maximums) => {\n    var anchors = [];\n    var maxUsed = [];\n    maximums.sort((a, b) => b[1] - a[1]).sort((a, b) => a[0] - b[0]);\n    minimums.forEach(min => {\n      var Max = [nbLignes, nbColonnes];\n      maximums.forEach(max => {\n        if (max[0] >= min[0] && max[1] >= min[1] && max[0] <= Max[0] && max[1] <= Max[1] && (min[0] < max[0] || min[1] < max[1]) && !maxUsed.includes(max)) {\n          Max = max;\n        }\n      });\n      maxUsed.push(Max);\n      anchors.push([min, Max]);\n    });\n    return anchors;\n  };\n\n  const getAnchors = () => {\n    var minimums = [];\n    var maximums = [];\n\n    for (let i = 0; i < mursV.length; i++) {\n      for (let j = 0; j < mursH[i].length; j++) {\n        if (mursV[i][j] > 0 && mursH[i][j] > 0) {\n          minimums.push([i, j]);\n        }\n\n        if (mursV[i][j + 1] > 0 && mursH[i + 1][j] > 0) {\n          maximums.push([i, j]);\n        }\n      }\n    }\n\n    return associate(minimums, maximums);\n  };\n\n  const getAnchor = (anchors, pos) => {\n    var Min = [-1, -1];\n    anchors.forEach(a => {\n      const min = a[0];\n      const max = a[1];\n\n      if (pos[0] >= min[0] && pos[1] >= min[1] && pos[0] <= max[0] && pos[1] <= max[1]) {\n        Min = min;\n      }\n    });\n    return Min;\n  };\n\n  const maxLignesPiece = 8;\n  const maxColonnesPiece = 16;\n  const nbLignes1 = 8;\n  const nbColonnes1 = 16;\n\n  const renderPieces = () => {\n    var components = [];\n    const anchors = getAnchors();\n    const anchor = getAnchor(anchors, position); // row, column\n\n    let nbL;\n    let nbC;\n\n    if (anchor === [-1, -1]) {\n      nbL = maxLignesPiece;\n      nbC = maxColonnesPiece;\n    } else {\n      const id = 7;\n      const area = anchors[id];\n      nbL = area[1][0] - area[0][0] + 1;\n      nbC = area[1][1] - area[0][1] + 1;\n      console.log(nbL);\n      console.log(nbC);\n    }\n\n    components.push( /*#__PURE__*/_jsxDEV(Piece, {\n      mursH: mursH,\n      mursV: mursV,\n      carte: carte,\n      position: position,\n      nbLignes: nbL,\n      nbColonnes: nbC,\n      maxColonnesPiece: maxColonnesPiece,\n      maxLignesPiece: maxLignesPiece,\n      anchor: [0, 0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this));\n    return components;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"piece-container\",\n    children: renderPieces()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Grille;\nexport default Grille;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grille\");","map":{"version":3,"sources":["C:/Users/hugod/dÃ©citude/client/src/components/Grille.js"],"names":["React","makeStyles","Piece","Grille","nbColonnes","nbLignes","carte","position","mursH","mursV","getDistance","min","max","Math","sqrt","associate","minimums","maximums","anchors","maxUsed","sort","a","b","forEach","Max","includes","push","getAnchors","i","length","j","getAnchor","pos","Min","maxLignesPiece","maxColonnesPiece","nbLignes1","nbColonnes1","renderPieces","components","anchor","nbL","nbC","id","area","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport './Grille.css';\r\n\r\nimport Piece from \"./pieces/Piece\"\r\n\r\n\r\n\r\nconst Grille = ({\r\n    nbColonnes,\r\n    nbLignes,\r\n    carte,\r\n    position,\r\n    mursH,\r\n    mursV\r\n}) => {\r\n\r\n    const getDistance=(min,max)=>{\r\n        return Math.sqrt((min[0]-max[0])*(min[0]-max[0]) + (min[1]-max[1])*(min[1]-max[1]))\r\n    }\r\n\r\n    const associate=(minimums,maximums)=>{\r\n        var anchors=[]\r\n        var maxUsed=[]\r\n\r\n        maximums.sort((a,b)=>b[1]-a[1]).sort((a,b)=>a[0]-b[0])\r\n\r\n        minimums.forEach(min => {\r\n            var Max =[nbLignes,nbColonnes]\r\n            maximums.forEach(max => {\r\n                if((max[0]>=min[0] && max[1]>=min[1]) && (max[0]<=Max[0] &&  max[1]<=Max[1]) && (min[0]<max[0] || min[1]<max[1]) && !maxUsed.includes(max)){\r\n                    Max = max\r\n                }\r\n            });\r\n            maxUsed.push(Max)\r\n            anchors.push([min,Max])\r\n        })\r\n       return(anchors)\r\n    }\r\n\r\n    const getAnchors=()=>{   \r\n        var minimums=[]\r\n        var maximums=[]\r\n        for(let i=0;i<mursV.length;i++){\r\n            for(let j=0;j<mursH[i].length;j++){\r\n                if(mursV[i][j]>0 && mursH[i][j]>0){\r\n                    minimums.push([i,j])\r\n                }   \r\n                if(mursV[i][j+1]>0 && mursH[i+1][j]>0){\r\n                    maximums.push([i,j])\r\n                }\r\n            }\r\n        }\r\n        return associate(minimums,maximums)\r\n    }\r\n\r\n    const getAnchor=(anchors,pos)=>{\r\n        \r\n        var Min=[-1,-1]\r\n        anchors.forEach(a => {\r\n            const min = a[0]\r\n            const max = a[1]\r\n\r\n            if(pos[0]>=min[0] && pos[1]>=min[1] && pos[0]<=max[0] && pos[1]<=max[1]){\r\n                Min= min\r\n            }\r\n        });\r\n        \r\n        return Min\r\n    }\r\n\r\n    const maxLignesPiece = 8\r\n    const maxColonnesPiece=16\r\n\r\n    \r\n    \r\n\r\n    const nbLignes1=8\r\n    const nbColonnes1=16\r\n    \r\n    const renderPieces=()=>{\r\n        var components =[]\r\n        \r\n        const anchors = getAnchors()\r\n        const anchor=getAnchor(anchors,position) // row, column\r\n\r\n        let nbL\r\n        let nbC\r\n\r\n        if(anchor ===[-1,-1]){\r\n            nbL = maxLignesPiece\r\n            nbC =maxColonnesPiece\r\n        }else{\r\n            const id=7\r\n            const area=anchors[id]\r\n            nbL = area[1][0]-area[0][0]+1\r\n            nbC = area[1][1]-area[0][1]+1\r\n    \r\n            console.log(nbL)\r\n            console.log(nbC)\r\n        }\r\n        \r\n\r\n\r\n\r\n        components.push(\r\n            <Piece\r\n                mursH={mursH}\r\n                mursV={mursV}\r\n                carte={carte}\r\n                position={position}\r\n                nbLignes={nbL}\r\n                nbColonnes={nbC}\r\n                maxColonnesPiece={maxColonnesPiece}\r\n                maxLignesPiece={maxLignesPiece}\r\n                anchor={[0,0]}\r\n            />\r\n        )\r\n        return components\r\n       \r\n    }\r\n    \r\n\r\n    return ( \r\n        <div \r\n            className=\"piece-container\"\r\n        >\r\n            {renderPieces()}\r\n        </div>\r\n    )\r\n}\r\n \r\nexport default Grille;"]},"metadata":{},"sourceType":"module"}