{"ast":null,"code":"import io from 'socket.io-client';\nconst urlBack = \"http://localhost:4000\";\nconst socket = io.connect(urlBack);\nexport default {\n  nouveauTour: async (numPompier, carte, mursH, mursV, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        carte: carte,\n        mursH: mursH,\n        mursV: mursV,\n        currentCycle: currentCycle,\n        currentTour: currentTour,\n        resultatsDecedes: resultatsDecedes,\n        resultatsSauves: resultatsSauves,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/nouveauTour\", requestOptions);\n    socket.emit('changementTour', {\n      numPompier: parseInt(numPompier)\n    });\n  },\n  getSocket: () => {\n    return socket;\n  },\n  getConfiguration: async session => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session\n      })\n    };\n    const response = await fetch(urlBack + \"/configuration\", requestOptions);\n    return await response.json();\n  },\n  getPlayState: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/playstate\", requestOptions);\n    return await response.json();\n  }\n};","map":{"version":3,"sources":["C:/Users/hugod/dÃ©citude/client/src/API/PlayAPI.js"],"names":["io","urlBack","socket","connect","nouveauTour","numPompier","carte","mursH","mursV","currentCycle","currentTour","resultatsDecedes","resultatsSauves","session","equipe","requestOptions","method","headers","body","JSON","stringify","response","fetch","emit","parseInt","getSocket","getConfiguration","json","getPlayState"],"mappings":"AACA,OAAOA,EAAP,MAAe,kBAAf;AAEA,MAAMC,OAAO,GAAG,uBAAhB;AACA,MAAMC,MAAM,GAAGF,EAAE,CAACG,OAAH,CAAWF,OAAX,CAAf;AAEA,eAAe;AAEXG,EAAAA,WAAW,EAAC,OAAMC,UAAN,EAAiBC,KAAjB,EAAuBC,KAAvB,EAA6BC,KAA7B,EAAmCC,YAAnC,EAAgDC,WAAhD,EAA4DC,gBAA5D,EAA6EC,eAA7E,EAA6FC,OAA7F,EAAqGC,MAArG,KAA8G;AAEtH,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBd,QAAAA,KAAK,EAACA,KADW;AAEjBC,QAAAA,KAAK,EAACA,KAFW;AAGjBC,QAAAA,KAAK,EAACA,KAHW;AAIjBC,QAAAA,YAAY,EAACA,YAJI;AAKjBC,QAAAA,WAAW,EAACA,WALK;AAMjBC,QAAAA,gBAAgB,EAACA,gBANA;AAOjBC,QAAAA,eAAe,EAACA,eAPC;AAQjBC,QAAAA,OAAO,EAACA,OARS;AASjBC,QAAAA,MAAM,EAACA;AATU,OAAf;AAHa,KAAvB;AAeA,UAAMO,QAAQ,GAAG,MAAOC,KAAK,CAACrB,OAAO,GAAC,cAAT,EAAyBc,cAAzB,CAA7B;AAEAb,IAAAA,MAAM,CAACqB,IAAP,CACI,gBADJ,EAEI;AACIlB,MAAAA,UAAU,EAAEmB,QAAQ,CAACnB,UAAD;AADxB,KAFJ;AAMH,GA3BU;AA4BXoB,EAAAA,SAAS,EAAC,MAAI;AACV,WAAOvB,MAAP;AACH,GA9BU;AA+BXwB,EAAAA,gBAAgB,EAAC,MAAMb,OAAN,IAAgB;AAC7B,UAAME,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACP,QAAAA,OAAO,EAACA;AAAT,OAAf;AAHa,KAAvB;AAKA,UAAMQ,QAAQ,GAAG,MAAOC,KAAK,CAACrB,OAAO,GAAC,gBAAT,EAA2Bc,cAA3B,CAA7B;AACA,WAAQ,MAAMM,QAAQ,CAACM,IAAT,EAAd;AACH,GAvCU;AAwCXC,EAAAA,YAAY,EAAC,OAAMf,OAAN,EAAcC,MAAd,KAAuB;AAChC,UAAMC,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBP,QAAAA,OAAO,EAACA,OADS;AAEjBC,QAAAA,MAAM,EAACA;AAFU,OAAf;AAHa,KAAvB;AAQA,UAAMO,QAAQ,GAAG,MAAOC,KAAK,CAACrB,OAAO,GAAC,YAAT,EAAuBc,cAAvB,CAA7B;AACA,WAAQ,MAAMM,QAAQ,CAACM,IAAT,EAAd;AACH;AAnDU,CAAf","sourcesContent":["\r\nimport io from 'socket.io-client'\r\n\r\nconst urlBack = \"http://localhost:4000\";\r\nconst socket = io.connect(urlBack)\r\n\r\nexport default {\r\n   \r\n    nouveauTour:async(numPompier,carte,mursH,mursV,currentCycle,currentTour,resultatsDecedes,resultatsSauves,session,equipe)=>{\r\n        \r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                carte:carte,\r\n                mursH:mursH,\r\n                mursV:mursV,\r\n                currentCycle:currentCycle,\r\n                currentTour:currentTour,\r\n                resultatsDecedes:resultatsDecedes,\r\n                resultatsSauves:resultatsSauves,\r\n                session:session,\r\n                equipe:equipe\r\n            })\r\n        };\r\n        const response = await  fetch(urlBack+\"/nouveauTour\", requestOptions)\r\n        \r\n        socket.emit(\r\n            'changementTour',\r\n            {\r\n                numPompier :parseInt(numPompier),\r\n            }\r\n        )\r\n    },\r\n    getSocket:()=>{\r\n        return socket\r\n    },\r\n    getConfiguration:async(session)=>{\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({session:session})\r\n        };\r\n        const response = await  fetch(urlBack+\"/configuration\", requestOptions)\r\n        return  await response.json()\r\n    },\r\n    getPlayState:async(session,equipe)=>{\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                session:session,\r\n                equipe:equipe\r\n            })\r\n        };\r\n        const response = await  fetch(urlBack+\"/playstate\", requestOptions)\r\n        return  await response.json()\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}