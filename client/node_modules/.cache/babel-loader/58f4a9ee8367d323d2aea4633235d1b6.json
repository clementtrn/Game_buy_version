{"ast":null,"code":"import io from 'socket.io-client';\nconst urlBack = \"http://localhost:4000\";\nconst socket = io.connect(urlBack);\nexport default {\n  startStopPartie: async start => {\n    console.log(\"start/stop partie\");\n    socket.emit('startStopPartie', {\n      start: start\n    });\n  },\n  nouveauTour: async (currentPomp, carte, mursH, mursV, currentSequence, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe, chrono) => {\n    console.log(\"nouveau tour\");\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        carte: carte,\n        mursH: mursH,\n        mursV: mursV,\n        currentPomp: currentPomp,\n        currentSequence: currentSequence,\n        currentCycle: currentCycle,\n        currentTour: currentTour,\n        resultatsDecedes: resultatsDecedes,\n        resultatsSauves: resultatsSauves,\n        session: session,\n        equipe: equipe,\n        currrentChrono: chrono\n      })\n    };\n    const response = fetch(urlBack + \"/nouveauTour\", requestOptions).then(res => {\n      console.log(res);\n      socket.emit('changementTour', {\n        currentSequence: parseInt(currentSequence),\n        currentPomp: parseInt(currentPomp),\n        currentTour: parseInt(currentTour),\n        currentCycle: parseInt(currentCycle)\n      });\n      return res;\n    });\n    console.log(\"changementTour\", response.json());\n    return response.json();\n  },\n  getSocket: () => {\n    return socket;\n  },\n  getConfiguration: async session => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session\n      })\n    };\n    const response = await fetch(urlBack + \"/configuration\", requestOptions);\n    return await response.json();\n  },\n  getPlayState: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/playstate\", requestOptions);\n    return await response.json();\n  },\n  revealHabitant: async (position, type) => {\n    // console.log(position[0])\n    socket.emit('revealHabitant', {\n      y: parseInt(position[0]),\n      x: parseInt(position[1]),\n      type: parseInt(type)\n    });\n    console.log(\"socket emit\");\n  },\n  saveBudgetsPompInit: async (cycles, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cycles: cycles,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/saveBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  saveBudgetsPompFin: async (budgetsFin, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        budgetsFin: budgetsFin,\n        session: session,\n        equipe: equipe\n      })\n    }; // console.log(\"budgets fin\")\n\n    const response = await fetch(urlBack + \"/saveBudgetsPompFin\", requestOptions);\n    console.log(\"save budgets fin\");\n    return response;\n  },\n  getBudgetsPompInit: async (session, equipe, numPompier, currentCycle, currentSequence) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe,\n        numPompier: numPompier,\n        cycle: currentCycle,\n        sequence: currentSequence\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  getBudgetsPompFin: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompFin\", requestOptions);\n    return await response.json();\n  },\n  updateCurrentChrono: async (chrono, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        chrono: chrono,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/updateChrono\", requestOptions);\n    return await response.json();\n  }\n};","map":{"version":3,"sources":["C:/Users/hugod/decitude/client/src/API/PlayAPI.js"],"names":["io","urlBack","socket","connect","startStopPartie","start","console","log","emit","nouveauTour","currentPomp","carte","mursH","mursV","currentSequence","currentCycle","currentTour","resultatsDecedes","resultatsSauves","session","equipe","chrono","requestOptions","method","headers","body","JSON","stringify","currrentChrono","response","fetch","then","res","parseInt","json","getSocket","getConfiguration","getPlayState","revealHabitant","position","type","y","x","saveBudgetsPompInit","cycles","saveBudgetsPompFin","budgetsFin","getBudgetsPompInit","numPompier","cycle","sequence","getBudgetsPompFin","updateCurrentChrono"],"mappings":"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","sourcesContent":["\nimport io from 'socket.io-client'\n\nconst urlBack = \"http://localhost:4000\";\nconst socket = io.connect(urlBack)\n\nexport default {\n    startStopPartie:async(start)=>{\n        console.log(\"start/stop partie\")\n       \n        socket.emit(\n            'startStopPartie',\n            {\n                start:start,\n            }\n        )\n        \n    },\n    nouveauTour:async(currentPomp,carte,mursH,mursV,currentSequence,currentCycle,currentTour,resultatsDecedes,resultatsSauves,session,equipe,chrono)=>{\n        console.log(\"nouveau tour\")\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                carte:carte,\n                mursH:mursH,\n                mursV:mursV,\n                currentPomp:currentPomp,\n                currentSequence:currentSequence,\n                currentCycle:currentCycle,\n                currentTour:currentTour,\n                resultatsDecedes:resultatsDecedes,\n                resultatsSauves:resultatsSauves,\n                session:session,\n                equipe:equipe,\n                currrentChrono:chrono\n            })\n        };\n       \n        \n        const response =  fetch(urlBack+\"/nouveauTour\", requestOptions).then((res)=>{\n            console.log(res)\n            socket.emit(\n                'changementTour',\n                {\n                    currentSequence:parseInt(currentSequence),\n                    currentPomp :parseInt(currentPomp),\n                    currentTour :parseInt(currentTour),\n                    currentCycle :parseInt(currentCycle),\n                }\n            )\n            return res\n        })\n\n        console.log(\"changementTour\", response.json())\n        return response.json()\n        \n    },\n    getSocket:()=>{\n        return socket\n    },\n    getConfiguration:async(session)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({session:session})\n        };\n        const response = await  fetch(urlBack+\"/configuration\", requestOptions)\n        return  await response.json()\n    },\n    getPlayState:async(session,equipe)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session:session,\n                equipe:equipe\n            })\n        };\n        const response = await  fetch(urlBack+\"/playstate\", requestOptions)\n        return  await response.json()\n    },\n    revealHabitant:async(position,type)=>{\n        // console.log(position[0])\n        socket.emit(\n            'revealHabitant',\n            {\n                y:parseInt(position[0]),\n                x:parseInt(position[1]),\n                type:parseInt(type)\n            }\n        )\n        console.log(\"socket emit\")\n    },\n    saveBudgetsPompInit:async(cycles,session,equipe)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                cycles:cycles,\n                session:session,\n                equipe:equipe\n            })\n        };\n        \n        const response = await  fetch(urlBack+\"/saveBudgetsPompInit\", requestOptions)\n\n      \n        return await response.json()\n    },\n    saveBudgetsPompFin:async(budgetsFin, session,equipe)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                budgetsFin:budgetsFin,\n                session:session,\n                equipe:equipe\n            })\n        };\n        // console.log(\"budgets fin\")\n\n        const response = await  fetch(urlBack+\"/saveBudgetsPompFin\", requestOptions)\n        console.log(\"save budgets fin\")\n        return  response\n    },\n    getBudgetsPompInit:async(session,equipe,numPompier,currentCycle,currentSequence)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session:session,\n                equipe:equipe,\n                numPompier:numPompier,\n                cycle:currentCycle,\n                sequence:currentSequence\n            })\n        };\n        \n        const response = await  fetch(urlBack+\"/getBudgetsPompInit\", requestOptions)\n\n      \n        return await response.json()\n    },\n    getBudgetsPompFin:async(session,equipe)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session:session,\n                equipe:equipe\n            })\n        };\n        \n        const response = await  fetch(urlBack+\"/getBudgetsPompFin\", requestOptions)\n\n      \n        return await response.json()\n    },\n    updateCurrentChrono:async(chrono,session,equipe)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                chrono:chrono,\n                session:session,\n                equipe:equipe\n            })\n        };\n        \n        const response = await  fetch(urlBack+\"/updateChrono\", requestOptions)\n        \n        return await response.json()\n    }\n    \n};\n"]},"metadata":{},"sourceType":"module"}