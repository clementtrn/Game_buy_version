{"ast":null,"code":"import io from 'socket.io-client';\nconst urlBack = \"http://localhost:4000\";\nconst socket = io.connect(urlBack);\nexport default {\n  nouveauTour: async (currentPomp, carte, mursH, mursV, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        carte: carte,\n        mursH: mursH,\n        mursV: mursV,\n        currentPomp: currentPomp,\n        currentCycle: currentCycle,\n        currentTour: currentTour,\n        resultatsDecedes: resultatsDecedes,\n        resultatsSauves: resultatsSauves,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/nouveauTour\", requestOptions).then(() => {\n      console.log(\"sended\");\n    });\n    socket.emit('changementTour', {\n      currentPomp: parseInt(currentPomp),\n      currentTour: parseInt(currentTour),\n      currentCycle: parseInt(currentCycle)\n    });\n    console.log(\"emitted\");\n    return await response.json();\n  },\n  getSocket: () => {\n    return socket;\n  },\n  getConfiguration: async session => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session\n      })\n    };\n    const response = await fetch(urlBack + \"/configuration\", requestOptions);\n    return await response.json();\n  },\n  getPlayState: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/playstate\", requestOptions);\n    return await response.json();\n  },\n  revealHabitant: async (position, type) => {\n    // console.log(position[0])\n    socket.emit('revealHabitant', {\n      y: parseInt(position[0]),\n      x: parseInt(position[1]),\n      type: parseInt(type)\n    });\n    console.log(\"socket emit\");\n  }\n};","map":{"version":3,"sources":["C:/Users/hugod/dÃ©citude/client/src/API/PlayAPI.js"],"names":["io","urlBack","socket","connect","nouveauTour","currentPomp","carte","mursH","mursV","currentCycle","currentTour","resultatsDecedes","resultatsSauves","session","equipe","requestOptions","method","headers","body","JSON","stringify","response","fetch","then","console","log","emit","parseInt","json","getSocket","getConfiguration","getPlayState","revealHabitant","position","type","y","x"],"mappings":"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","sourcesContent":["\nimport io from 'socket.io-client'\n\nconst urlBack = \"http://localhost:4000\";\nconst socket = io.connect(urlBack)\n\nexport default {\n   \n    nouveauTour:async(currentPomp,carte,mursH,mursV,currentCycle,currentTour,resultatsDecedes,resultatsSauves,session,equipe)=>{\n        \n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                carte:carte,\n                mursH:mursH,\n                mursV:mursV,\n                currentPomp:currentPomp,\n                currentCycle:currentCycle,\n                currentTour:currentTour,\n                resultatsDecedes:resultatsDecedes,\n                resultatsSauves:resultatsSauves,\n                session:session,\n                equipe:equipe\n            })\n        };\n        \n        \n        const response = await  fetch(urlBack+\"/nouveauTour\", requestOptions).then(()=>{\n            console.log(\"sended\")\n            \n    \n        })\n\n        socket.emit(\n            'changementTour',\n            {\n                currentPomp :parseInt(currentPomp),\n                currentTour :parseInt(currentTour),\n                currentCycle :parseInt(currentCycle),\n            }\n        )\n        console.log(\"emitted\")\n        return await response.json()\n        \n    },\n    getSocket:()=>{\n        return socket\n    },\n    getConfiguration:async(session)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({session:session})\n        };\n        const response = await  fetch(urlBack+\"/configuration\", requestOptions)\n        return  await response.json()\n    },\n    getPlayState:async(session,equipe)=>{\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session:session,\n                equipe:equipe\n            })\n        };\n        const response = await  fetch(urlBack+\"/playstate\", requestOptions)\n        return  await response.json()\n    },\n    revealHabitant:async(position,type)=>{\n        // console.log(position[0])\n        socket.emit(\n            'revealHabitant',\n            {\n                y:parseInt(position[0]),\n                x:parseInt(position[1]),\n                type:parseInt(type)\n            }\n        )\n        console.log(\"socket emit\")\n    }\n};\n"]},"metadata":{},"sourceType":"module"}