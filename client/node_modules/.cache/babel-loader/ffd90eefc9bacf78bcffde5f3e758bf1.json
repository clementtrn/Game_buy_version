{"ast":null,"code":"const urlBack = \"http://localhost:4000\";\nexport default {\n  startStopPartie: async (socket, start) => {\n    console.log(\"start/stop partie\");\n    socket.emit('startStopPartie', {\n      start: start\n    });\n  },\n  nouveauTour: async (socket, currentPomp, carte, mursH, mursV, currentSequence, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe, chrono) => {\n    console.log(\"nouveau tour\");\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        carte: carte,\n        mursH: mursH,\n        mursV: mursV,\n        currentPomp: currentPomp,\n        currentSequence: currentSequence,\n        currentCycle: currentCycle,\n        currentTour: currentTour,\n        resultatsDecedes: resultatsDecedes,\n        resultatsSauves: resultatsSauves,\n        session: session,\n        equipe: equipe,\n        currrentChrono: chrono\n      })\n    };\n    fetch(urlBack + \"/nouveauTour\", requestOptions) // .then((response) => {\n    //     console.log(\"test\")\n    //     return response.json();\n    // })\n    .then(() => {\n      socket.emit('changementTour', {\n        currentSequence: parseInt(currentSequence),\n        currentPomp: parseInt(currentPomp),\n        currentTour: parseInt(currentTour),\n        currentCycle: parseInt(currentCycle)\n      });\n      console.log(\"changement tour\");\n    });\n  },\n  // getSocket: () => {\n  //     return socket\n  // },\n  getConfiguration: async session => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session\n      })\n    };\n    const response = await fetch(urlBack + \"/configuration\", requestOptions);\n    return await response.json();\n  },\n  getPlayState: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/playstate\", requestOptions);\n    return await response.json();\n  },\n  revealHabitant: async (socket, position, type) => {\n    // console.log(position[0])\n    socket.emit('revealHabitant', {\n      y: parseInt(position[0]),\n      x: parseInt(position[1]),\n      type: parseInt(type)\n    });\n    console.log(\"socket emit\");\n  },\n  saveBudgetsPompInit: async (cycles, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cycles: cycles,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/saveBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  saveBudgetsPompFin: async (budgetsFin, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        budgetsFin: budgetsFin,\n        session: session,\n        equipe: equipe\n      })\n    }; // console.log(\"budgets fin\")\n\n    const response = await fetch(urlBack + \"/saveBudgetsPompFin\", requestOptions);\n    console.log(\"save budgets fin\");\n    return response;\n  },\n  getBudgetsPompInit: async (session, equipe, numPompier, currentCycle, currentSequence) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe,\n        numPompier: numPompier,\n        cycle: currentCycle,\n        sequence: currentSequence\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  getBudgetsPompFin: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompFin\", requestOptions);\n    return await response.json();\n  },\n  updateCurrentChrono: async (chrono, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        chrono: chrono,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/updateChrono\", requestOptions);\n    return await response.json();\n  }\n};","map":{"version":3,"sources":["C:/Users/hugod/decitude/client/src/API/PlayAPI.js"],"names":["urlBack","startStopPartie","socket","start","console","log","emit","nouveauTour","currentPomp","carte","mursH","mursV","currentSequence","currentCycle","currentTour","resultatsDecedes","resultatsSauves","session","equipe","chrono","requestOptions","method","headers","body","JSON","stringify","currrentChrono","fetch","then","parseInt","getConfiguration","response","json","getPlayState","revealHabitant","position","type","y","x","saveBudgetsPompInit","cycles","saveBudgetsPompFin","budgetsFin","getBudgetsPompInit","numPompier","cycle","sequence","getBudgetsPompFin","updateCurrentChrono"],"mappings":"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","sourcesContent":["\n\n\n\nconst urlBack = \"http://localhost:4000\";\nexport default {\n    startStopPartie: async (socket,start) => {\n        console.log(\"start/stop partie\")\n\n        socket.emit(\n            'startStopPartie',\n            {\n                start: start,\n            }\n        )\n\n    },\n    nouveauTour: async (socket,currentPomp, carte, mursH, mursV, currentSequence, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe, chrono) => {\n        console.log(\"nouveau tour\")\n        \n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                carte: carte,\n                mursH: mursH,\n                mursV: mursV,\n                currentPomp: currentPomp,\n                currentSequence: currentSequence,\n                currentCycle: currentCycle,\n                currentTour: currentTour,\n                resultatsDecedes: resultatsDecedes,\n                resultatsSauves: resultatsSauves,\n                session: session,\n                equipe: equipe,\n                currrentChrono: chrono\n            })\n        };\n\n\n        fetch(urlBack + \"/nouveauTour\", requestOptions)\n            // .then((response) => {\n            //     console.log(\"test\")\n            //     return response.json();\n            // })\n            .then(() => {\n                socket.emit(\n                    'changementTour',\n                    {\n                        currentSequence: parseInt(currentSequence),\n                        currentPomp: parseInt(currentPomp),\n                        currentTour: parseInt(currentTour),\n                        currentCycle: parseInt(currentCycle),\n                    }\n                )\n                console.log(\"changement tour\")\n            })\n\n    },\n    // getSocket: () => {\n    //     return socket\n    // },\n    getConfiguration: async (session) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ session: session })\n        };\n        const response = await fetch(urlBack + \"/configuration\", requestOptions)\n        return await response.json()\n    },\n    getPlayState: async (session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe\n            })\n        };\n        const response = await fetch(urlBack + \"/playstate\", requestOptions)\n        return await response.json()\n    },\n    revealHabitant: async (socket,position, type) => {\n        // console.log(position[0])\n        socket.emit(\n            'revealHabitant',\n            {\n                y: parseInt(position[0]),\n                x: parseInt(position[1]),\n                type: parseInt(type)\n            }\n        )\n        console.log(\"socket emit\")\n    },\n    saveBudgetsPompInit: async (cycles, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                cycles: cycles,\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/saveBudgetsPompInit\", requestOptions)\n\n\n        return await response.json()\n    },\n    saveBudgetsPompFin: async (budgetsFin, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                budgetsFin: budgetsFin,\n                session: session,\n                equipe: equipe\n            })\n        };\n        // console.log(\"budgets fin\")\n\n        const response = await fetch(urlBack + \"/saveBudgetsPompFin\", requestOptions)\n        console.log(\"save budgets fin\")\n        return response\n    },\n    getBudgetsPompInit: async (session, equipe, numPompier, currentCycle, currentSequence) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe,\n                numPompier: numPompier,\n                cycle: currentCycle,\n                sequence: currentSequence\n            })\n        };\n\n        const response = await fetch(urlBack + \"/getBudgetsPompInit\", requestOptions)\n\n\n        return await response.json()\n    },\n    getBudgetsPompFin: async (session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/getBudgetsPompFin\", requestOptions)\n\n\n        return await response.json()\n    },\n    updateCurrentChrono: async (chrono, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                chrono: chrono,\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/updateChrono\", requestOptions)\n\n        return await response.json()\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}