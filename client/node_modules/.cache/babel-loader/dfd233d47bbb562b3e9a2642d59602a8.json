{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hugo Dufr\\xEAne\\\\decitude\\\\client\\\\src\\\\routes\\\\InterfaceInter.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/App.css\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport PlayAPI from \"../API/PlayAPI\";\nimport BandeauTopInter from \"../components/interfaceJoueur/BandeauTopInter\";\nimport BandeauBottomInter from \"../components/interfaceJoueur/BandeauBottomInter\";\nimport Grille from \"../components/interfaceJoueur/Grille\";\nimport InterInterventions from \"../components/interfaceJoueur/InterInterventions\";\nimport { useHistory } from 'react-router-dom';\nimport cookie from 'react-cookies';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InterfaceInter = () => {\n  _s();\n\n  console.log(\"interface inter\");\n  const history = useHistory();\n  const user = cookie.load(\"user\"); // console.log(user)\n  // if(user==null || user==undefined) history.push(\"/login\");\n\n  const [numPompier, setNumPompier] = useState(0); // const [currentTour, setCurrentTour] = useState(null)\n  // const [currentCycle, setCurrentCycle] = useState(null)\n\n  const [currentTour, setCurrentTour] = useState(1);\n  const [currentCycle, setCurrentCycle] = useState(1); // const [session,setSession]=useState(user.session)\n  // const [equipe,setEquipe]=useState(user.equipe)\n\n  const [session, setSession] = useState(1);\n  const [equipe, setEquipe] = useState(1);\n  const [chrono, setChrono] = useState(null);\n  useEffect(() => {\n    console.log(chrono);\n\n    if (currentTour == numPompier) {\n      if (chrono > 0) {\n        var chronoTimer = setInterval(() => {\n          setChrono(chrono => chrono - 1);\n        }, 1000);\n      }\n\n      return () => {\n        clearInterval(chronoTimer);\n      };\n    }\n  }, [chrono]); // const [configuration, setConfiguration] = useState(null)\n\n  const [configuration, setConfiguration] = useState({\n    chronoTour: {\n      valeur: 180\n    },\n    nbSequences: {\n      valeur: 4\n    },\n    nbCyclesParSequence: {\n      valeur: 2\n    },\n    nbPompEquipe: {\n      valeur: 6\n    }\n  });\n  useEffect(() => {\n    console.log(configuration);\n\n    if (configuration != null) {\n      setChrono(configuration.chronoTour.valeur);\n    }\n  }, [configuration]); // const [stocks, setStocks] = useState({\n  //   Interventions: 10,\n  //   Feu: 1,\n  //   FeuFum: 10,\n  //   Fum: 10,\n  //   Marqueur: 10,\n  // })\n\n  const [resultats, setResultats] = useState({\n    Decedes: 1,\n    Sauves: 2,\n    Marqueurs: 3\n  }); // const [interventions, setInterventions] = useState({\n  //   Deplacement: 0,\n  //   Feu: 0,\n  //   FeuFum: 0,\n  //   Fum: 0,\n  //   Marqueur: 0,\n  //   Porte: 0,\n  //   Habitant: 0\n  // })\n  // const [budget, setBudget] = useState(800)\n\n  const isLoading = useRef(false); // INITIALISATION DE LA CARTE\n\n  const [carte, setCarte] = useState([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]); // const [carte, setCarte] = useState([])\n\n  const [nbLignesGrille, setNbLignesGrille] = useState(0);\n  const [nbColonnesGrille, setNbColonnesGrille] = useState(0);\n  const [position, setPosition] = useState(null);\n  const [mursH, setMursH] = useState([[1, 1, 1, 1, 1, 1, 2, 6, 1, 1, 1, 1, 2, 5, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 2, 6, 1, 6, 2, 1, 1, 1, 5, 2, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 1, 1, 6, 2, 1, 1, 1, 1, 1, 1, 1, 1]]);\n  const [mursV, setMursV] = useState([[1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 2], [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 5]]);\n\n  const getNombreMarqueurs = (mursH, mursV) => {\n    let nbMarqueurs = 0;\n    mursH.forEach(ligne => {\n      ligne.forEach(valeur => {\n        if (valeur == 3) nbMarqueurs = nbMarqueurs + 1;\n        if (valeur == 4) nbMarqueurs = nbMarqueurs + 2;\n      });\n    });\n    mursV.forEach(ligne => {\n      ligne.forEach(valeur => {\n        if (valeur == 3) nbMarqueurs = nbMarqueurs + 1;\n        if (valeur == 4) nbMarqueurs = nbMarqueurs + 2;\n      });\n    });\n    return nbMarqueurs;\n  }; // GET PLAY PARAMETERS \n  // const getPlayState=async(session,equipe)=>{\n  //   if(!isLoading.current){\n  //     isLoading.current=true\n  //     const currentPlayState = await PlayAPI.getPlayState(session,equipe)\n  //     if(Object.keys(currentPlayState).length>0 ){\n  //       // console.log(\"Get play state 2\")\n  //       console.log(parseInt(JSON.parse(currentPlayState.currentTour.valeur)))\n  //       setCurrentTour(parseInt(JSON.parse(currentPlayState.currentTour.valeur)))\n  //       setCurrentCycle(parseInt(JSON.parse(currentPlayState.currentCycle.valeur)))\n  //       const mursH=JSON.parse(currentPlayState.mursH.valeur)\n  //       const mursV=JSON.parse(currentPlayState.mursV.valeur)\n  //       setMursH(mursH)\n  //       setMursV(mursV)\n  //       setCarte(JSON.parse(currentPlayState.carte.valeur))\n  //       setResultats({\n  //         Decedes:parseInt(JSON.parse(currentPlayState.resultatsDecedes.valeur)),\n  //         Sauves:parseInt(JSON.parse(currentPlayState.resultatsSauves.valeur)),\n  //         Marqueurs:getNombreMarqueurs(mursH,mursV)\n  //       })\n  //     }\n  //     // getPositionFromCarte(JSON.parse(currentPlayState.carte.valeur))\n  //     isLoading.current=false\n  //   }\n  // }\n\n\n  useEffect(() => {\n    console.log(carte);\n\n    if (carte.length > 0) {\n      setNbLignesGrille(carte.length);\n      setNbColonnesGrille(carte[0].length);\n      setPosition([carte.length + 1, carte[0].length + 1]);\n    }\n  }, [carte]);\n  useEffect(() => {\n    console.log(currentTour);\n  }, [currentTour]); // useEffect(()=>{\n  //   if(session!=null && equipe!=null && currentTour==null){\n  //     // if(!isLoading.current) getPlayState(session,equipe)\n  //     // getPlayParameters()\n  //     // getPositionFromCarte()\n  //   }\n  // },[session,equipe,numPompier])\n\n  const getPlayParameters = async () => {// const param = await PlayAPI.getConfiguration(session)\n    // setConfiguration(param)\n  }; // const getPositionFromCarte=(carte)=>{\n  //   console.log(carte)\n  //   if(carte!=null && carte.length>0){\n  //     carte.forEach((ligne,indexI) => {\n  //       ligne.forEach((valeur,indexJ) => {\n  //         if( Math.floor(valeur / 100) == 1 && valeur%100/10==numPompier) setPosition([indexI,indexJ])\n  //       })\n  //     });\n  //   }\n  // }\n  // // UPDATES\n  // const updateCarte = (coords, value) => {\n  //   if (coords[0] < nbLignesGrille && coords[1] < nbColonnesGrille) {\n  //     try {\n  //       var c = [...carte]\n  //       c[coords[0]][coords[1]] = value\n  //       setCarte(c)\n  //     } catch (error) {\n  //       console.log(error)\n  //     }\n  //   }\n  // }\n  // const updateMurH = (coords, value) => {\n  //   if (coords[0] < mursH.length && coords[1] < mursH[0].length) {\n  //     try {\n  //       var m = [...mursH]\n  //       m[coords[0]][coords[1]] = value\n  //       setMursH(m)\n  //     } catch (error) {\n  //       console.log(error)\n  //     }\n  //   }\n  // }\n  // const updateMurV = (coords, value) => {\n  //   if (coords[0] < mursV.length && coords[1] < mursV[0].length) {\n  //     try {\n  //       var m = [...mursV]\n  //       m[coords[0]][coords[1]] = value\n  //       setMursV(m)\n  //     } catch (error) {\n  //       console.log(error)\n  //     }\n  //   }\n  // }\n  // ACTIONS\n  // const updateBudget = (action) => {\n  //   var depenses = 0\n  //   if (configuration[\"coutEq\" + action] != null) depenses += configuration[\"coutEq\" + action].valeur\n  //   if (configuration[\"coutInter\" + action] != null) depenses += configuration[\"coutInter\" + action].valeur\n  //   setBudget(budget => budget - depenses)\n  // }\n  // const doAction = (action) => {\n  //   try {\n  //     if(Object.keys(stocks).includes(action)){\n  //       var s = stocks\n  //       s[action] = s[action] - 1\n  //       setStocks(s)\n  //     }\n  //   } catch (error) { }\n  //   try {\n  //     if(Object.keys(interventions).includes(action)){\n  //       var i = interventions\n  //     i[action] = i[action] - 1\n  //     setInterventions(i)\n  //     }      \n  //   } catch (error) { }\n  //   updateBudget(action)\n  // }\n  // const updateResultats = (sauve) => {\n  //   var res = resultats\n  //   if (sauve) {\n  //     res.nbSauves += 1\n  //   } else {\n  //     res.nbDecedes += 1\n  //   }\n  //   setResultats(res)\n  // }\n  // useEffect(() => {\n  //   setBtnClickedBottom(null)\n  //   revealHabitant()\n  // }, [position])\n  // useEffect(() => {\n  //   if(carte.length>0) relacherHabitant()\n  // }, [position, mursH, mursV])\n  // // useEffect(() => {\n  // //   console.log(\"Stocks\")\n  // //   console.log(stocks)\n  // // }, [stocks])\n  // useEffect(() => {\n  //   if (configuration != null) {\n  //     var inter = interventions\n  //     const interKeys = Object.keys(inter)\n  //     interKeys.forEach(action => {\n  //       try {\n  //         if (configuration[\"coutInter\" + action].valeur > 0) {\n  //           inter[action] = Math.min(\n  //             configuration[\"coutEq\" + action] != null && configuration[\"coutEq\" + action] != undefined ? Math.floor(budget / (configuration[\"coutInter\" + action].valeur + configuration[\"coutEq\" + action].valeur)) : Math.floor(budget / configuration[\"coutInter\" + action].valeur),\n  //             stocks[action] != null && stocks[action] != undefined && stocks[action] !=\"NaN\" ? stocks[action] : 1000\n  //           )\n  //         }\n  //       } catch (error) {\n  //         console.log(error,action)\n  //       }\n  //     })\n  //     setInterventions(inter)\n  //   } else {\n  //     // getPlayParameters()\n  //   }\n  // }, [budget, configuration, numPompier])\n  // SOCKETS\n  // const socket = PlayAPI.getSocket()\n  // // SOCKETS \n  // const onTourChange = async (e) => {\n  //   e.preventDefault()\n  //   console.log(\"nouveau tour todo\")\n  // }\n  // useEffect(() => {\n  //   socket.on('changementTour', (data) => {\n  //     console.log(\"socket nouveau tour\")\n  //     // setCurrentTour(data.numPompier + 1)\n  //     // getPlayState(session,equipe)\n  //   })\n  // });\n  // TESTS\n\n\n  const test = async () => {\n    console.log(\"test function\");\n  }; // const renderTests = () => {\n  //   return (\n  //     <div style={{ position: \"absolute\", top: 200 }}>\n  //       <div className=\"card\" style={{ flex: 1, flexDirection: \"column\" }}>\n  //         <form onSubmit={e => onTourChange(e)}>\n  //           <h1>Manual settings</h1>\n  //           <div className=\"name-field\">\n  //             <label htmlFor=\"numPompier\">Numéro pompier</label>\n  //             <input\n  //               type=\"number\"\n  //               name=\"numPompier\"\n  //               onChange={e => onTextChange(e)}\n  //               value={numPompier}\n  //               label=\"Numéro pompier\"\n  //             />\n  //           </div>\n  //           {currentTour == numPompier ?\n  //             <button>Fin du tour</button>\n  //             :\n  //             <button disabled>Fin du tour</button>\n  //           }\n  //         </form>\n  //       </div>\n  //       <div style={{ flex: 1, flexDirection: \"column\" }}>\n  //         <label htmlFor=\"numPompier\">Position x</label>\n  //         <input\n  //           type=\"number\"\n  //           name=\"xPompier\"\n  //           onChange={e => onXChange(e)}\n  //           value={position[1]}\n  //         />\n  //         <label htmlFor=\"numPompier\">Position y</label>\n  //         <input\n  //           type=\"number\"\n  //           name=\"yPompier\"\n  //           onChange={e => onYChange(e)}\n  //           value={position[0]}\n  //         />\n  //       </div>\n  //       <button onClick={() => test()} >test function</button>\n  //     </div>\n  //   )\n  // }\n  // AUTORISATIONS \n  // const deplacementAutorise = (deplacement) => {\n  //   // return true\n  //   var dpl = [...deplacement]\n  //   if (dpl[0] == 0 && dpl[1] == 0) return false\n  //   if (position[0] + dpl[0] > carte.length - 1 || position[1] + dpl[1] > carte[0].length - 1 || position[0] + dpl[0] < 0 || position[1] + dpl[1] < 0) return false\n  //   const dplInterditsCases = [100, 20, 3, 4]\n  //   try {\n  //     const valeurCaseDeplacement = carte[position[0] + dpl[0]][position[1] + dpl[1]]\n  //     if (Math.floor(valeurCaseDeplacement/100)==1) return false\n  //     if (Math.floor(valeurCaseDeplacement/10)==2) return false\n  //     if (dplInterditsCases.includes(valeurCaseDeplacement)) return false\n  //   } catch (error) { }\n  //   const dplInterditsMurs = [1, 2, 3, 5]\n  //   try {\n  //     if (dpl[0] != 0) { // haut bas\n  //       if (dpl[0] < 0) {\n  //         dpl[0] = 0\n  //       }\n  //       if (typeof (mursH[position[0] + dpl[0]][position[1]]) === 'undefined') return false\n  //       if (dplInterditsMurs.includes(mursH[position[0] + dpl[0]][position[1]])) return false\n  //     } else { // gauche droite\n  //       if (dpl[1] < 0) {\n  //         dpl[1] = 0\n  //       }\n  //       if (typeof (mursV[position[0]][position[1] + dpl[1]]) === 'undefined') return false\n  //       if (dplInterditsMurs.includes(mursV[position[0]][position[1] + dpl[1]])) return false\n  //     }\n  //   } catch (error) { }\n  //   return true\n  // }\n  // const testRelacherHabitant = () => {\n  //   if (carte[position[0]][position[1]]%10==0) return false // pas de transport d'habitant\n  //   const mursBloquants = [1, 2, 3, 5]\n  //   if (position[0] == 0 && !mursBloquants.includes(mursH[position[0]][position[1]])) return true // haut\n  //   if (position[0] == nbLignesGrille - 1 && !mursBloquants.includes(mursH[position[0] + 1][position[1]])) return true // bas\n  //   if (position[1] == 0 && !mursBloquants.includes(mursV[position[0]][position[1]])) return true // gauche\n  //   if (position[1] == nbColonnesGrille - 1 && !mursBloquants.includes(mursV[position[0]][position[1] + 1])) return true // droite\n  //   return false\n  // }\n  // const relacherHabitant = () => {\n  //   if (testRelacherHabitant()) {\n  //     setTimeout(() => {\n  //       updateResultats(true)\n  //       updateCarte(position, 100+numPompier*10)\n  //     }, 1000);\n  //   }\n  // }\n  // const revealHabitant=()=>{\n  //   if(configuration!=null){\n  //     const casesAutour = getCasesAutour()\n  //     console.log(configuration)\n  //     const nouvelHabitant = Math.random() <= configuration.txApparitionHab.valeur\n  //     try {\n  //       if(casesAutour.dessus==20) updateCarte([position[0]-1,position[1]], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\n  //     } catch (error) {}\n  //     try {\n  //       if(casesAutour.droite==20) updateCarte([position[0],position[1]+1], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\n  //     } catch (error) {}\n  //     try {\n  //       if(casesAutour.dessous==20) updateCarte([position[0]+1,position[1]], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\n  //     } catch (error) {}\n  //     try {\n  //       if(casesAutour.gauche==20) updateCarte([position[0],position[1]-1], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\n  //     } catch (error) {}\n  //   }\n  // }\n  // const getCasesAutour = () => {\n  //   var cases = {}\n  //   try {\n  //     cases[\"dessus\"]=(carte[position[0] - 1][position[1]]) // dessus\n  //   } catch (error) { }\n  //   try {\n  //     cases[\"droite\"]=(carte[position[0]][position[1] + 1]) // droite\n  //   } catch (error) { }\n  //   try {\n  //     cases[\"dessous\"]=(carte[position[0] + 1][position[1]]) // dessous\n  //   } catch (error) { }\n  //   try {\n  //     cases[\"gauche\"]=(carte[position[0]][position[1] - 1]) // gauche\n  //   } catch (error) { }\n  //   return cases\n  // }\n  // const getMursAutour = () => {\n  //   var murs = []\n  //   try {\n  //     if (mursH[position[0]][position[1]] != 4 || (mursH[position[0]][position[1] - 1] < 6 && mursH[position[0]][position[1] + 1] < 6)) {\n  //       murs.push(mursH[position[0]][position[1]]) // dessus\n  //     } else {\n  //       murs.push(0)\n  //     }\n  //   } catch (error) { }\n  //   try {\n  //     if (mursV[position[0]][position[1] + 1] != 4 || (mursV[position[0] - 1][position[1] + 1] < 6 && mursV[position[0] + 1][position[1] + 1] < 6)) {\n  //       murs.push(mursV[position[0]][position[1] + 1])  // droite\n  //     } else {\n  //       murs.push(0)\n  //     }\n  //   } catch (error) { }\n  //   try {\n  //     if (mursH[position[0] + 1][position[1]] != 4 || (mursH[position[0] + 1][position[1] - 1] < 6 && mursH[position[0] + 1][position[1] + 1] < 6)) {\n  //       murs.push(mursH[position[0] + 1][position[1]]) // dessous\n  //     } else {\n  //       murs.push(0)\n  //     }\n  //   } catch (error) { }\n  //   try {\n  //     if (mursV[position[0]][position[1]] != 4 || (mursV[position[0] - 1][position[1]] < 6 && mursV[position[0] + 1][position[1]] < 6)) {\n  //       murs.push(mursV[position[0]][position[1]])  // gauche\n  //     } else {\n  //       murs.push(0)\n  //     }\n  //   } catch (error) { }\n  //   // console.log(murs)\n  //   return murs\n  // }\n  // const [btnClickedBottom, setBtnClickedBottom] = useState(null)\n  // const [propositionsCase, setPropositionsCase] = useState([]) // Extincteurs\n  // const [propositionMursDetruire, setPropositionMursDetruire] = useState([[], []]) // Horizontaux  , Verticaux\n  // useEffect(() => {\n  //   if (btnClickedBottom != 3 || btnClickedBottom == null) {\n  //     setPropositionMursDetruire([[], []])\n  //   }\n  //   if ((btnClickedBottom > 2 && btnClickedBottom < 6) || btnClickedBottom == null) {\n  //     setPropositionsCase([])\n  //   }\n  // }, [btnClickedBottom])\n  // HANDLERS CLIC GRILLE\n  // const handleClicCase = (valeurAvant, valeurApres, coordX, coordY) => {\n  //   console.log(valeurAvant, valeurApres, coordX, coordY)\n  //   try {\n  //     updateCarte([coordY, coordX], valeurApres)\n  //     setPropositionsCase([])\n  //     setBtnClickedBottom(null)\n  //     if (valeurAvant == 4 && valeurApres == 0) { // Extincteur flamme\n  //       doAction(\"Feu\")\n  //     }\n  //     if (valeurAvant == 4 && valeurApres == 3) { // Feu Fumée\n  //       doAction(\"FeuFum\")\n  //     }\n  //     if (valeurAvant == 3 && valeurApres == 0) { // Fumée\n  //       doAction(\"Fum\")\n  //     }\n  //     if (Math.floor(valeurAvant/10)==2 && valeurApres == 0) { // Habitant\n  //       doAction(\"Habitant\")\n  //       updateCarte(position, 100+numPompier*10+valeurAvant%10)\n  //     }\n  //   } catch (error) { }\n  // }\n  // const handleClicMur = (num, valeurAvant, coordX, coordY) => { // marqueur dégat\n  //   if (propositionMursDetruire[0].length > 0 || propositionMursDetruire[1].length > 0) {\n  //     const checkInCoords = (index) => {\n  //       // console.log(\"coordx\",coordX,\"coordy\",coordY,\"position\",position)\n  //       let numClic = null\n  //       if (coordX == position[1] && (coordY < position[0] || (coordY == position[0] && num == 0))) { // top\n  //         numClic = 0  // case en question\n  //         // console.log(\"top\",numClic)\n  //       }\n  //       if (coordX == position[1] && (coordY > position[0] || (coordY == position[0] && num == 2))) { // bottom\n  //         numClic = 2  // case en question\n  //         // console.log(\"bottom\",numClic)\n  //       }\n  //       if (coordY == position[0] && (coordX < position[1] || (coordX == position[1] && num == 3))) { // left\n  //         numClic = 3  // case en question\n  //         // console.log(\"left\",numClic)\n  //       }\n  //       if (coordY == position[0] && (coordX > position[1] || (coordX == position[1] && num == 1))) { // right\n  //         numClic = 1  // case en question\n  //         // console.log(\"right\",numClic)\n  //       }\n  //       return numClic\n  //     }\n  //     var cote = checkInCoords(num % 2)\n  //     let valeurApres = 4\n  //     if (valeurAvant == 1) valeurApres = 3\n  //     if (cote != null) {\n  //       try {\n  //         switch (cote) {\n  //           case 0:\n  //             updateMurH([position[0], position[1]], valeurApres)\n  //             // if(valeurAvant==5 ||)\n  //             break;\n  //           case 1:\n  //             updateMurV([position[0], position[1] + 1], valeurApres)\n  //             break;\n  //           case 2:\n  //             updateMurH([position[0] + 1, position[1]], valeurApres)\n  //             break;\n  //           case 3:\n  //             updateMurV([position[0], position[1]], valeurApres)\n  //             break;\n  //         }\n  //         doAction(\"Marqueur\")\n  //       } catch (error) {\n  //       }\n  //       setPropositionMursDetruire([[], []])\n  //       setBtnClickedBottom(null)\n  //     }\n  //   }\n  // }\n  // HANDLER CLICS BOUTONS\n  // const handleClicFleche = (num) => {\n  //   // Position y x\n  //   let deplacement\n  //   switch (num) {\n  //     case 0: // haut\n  //       console.log(\"haut\")\n  //       deplacement = [-1, 0]\n  //       break;\n  //     case 1: // droite\n  //       console.log(\"droite\")\n  //       deplacement = [0, 1]\n  //       break;\n  //     case 2: // bas\n  //       console.log(\"bas\")\n  //       deplacement = [1, 0]\n  //       break;\n  //     case 3: // gauche\n  //       console.log(\"gauche\")\n  //       deplacement = [0, -1]\n  //       break;\n  //   }\n  //   if (deplacementAutorise(deplacement)) {\n  //     updateCarte([position[0] + deplacement[0], position[1] + deplacement[1]], carte[position[0]][position[1]])\n  //     setPosition(position => [position[0] + deplacement[0], position[1] + deplacement[1]])\n  //     doAction(\"Deplacement\")\n  //     updateCarte(position, 0)\n  //   }\n  // }\n  // const handleClicDoor = (ouvrir) => { // position, ouvert/fermé\n  //   setBtnClickedBottom(ouvrir ? 4 : 5)\n  //   let valueAvant\n  //   let valueApres\n  //   if (ouvrir) {\n  //     valueAvant = 5\n  //     valueApres = 6\n  //   } else {\n  //     valueAvant = 6\n  //     valueApres = 5\n  //   }\n  //   doAction(\"Porte\")\n  //   try {\n  //     if (mursH[position[0]][position[1]] == valueAvant) updateMurH([position[0], position[1]], valueApres)\n  //     if (mursH[position[0] + 1][position[1]] == valueAvant) updateMurH([position[0] + 1, position[1]], valueApres)\n  //     if (mursV[position[0]][position[1]] == valueAvant) updateMurV([position[0], position[1]], valueApres)\n  //     if (mursV[position[0]][position[1] + 1] == valueAvant) updateMurV([position[0], position[1] + 1], valueApres)\n  //   } catch (error) {\n  //   }\n  // }\n  // const handleClicExtincteur = (num) => {\n  //   // 0 FEU, 1 FEUFUM, 2 FUM\n  //   if (btnClickedBottom != num) {\n  //     var listeCasesAction = []\n  //     let valeurAvant = 4\n  //     let valeurApres = 0\n  //     setBtnClickedBottom(num)\n  //     switch (num) {\n  //       case 0: // ETEINDRE FEU\n  //         break;\n  //       case 1: // FEU FUM\n  //         valeurApres = 3\n  //         break;\n  //       case 2: // ETEINDRE FUMEE\n  //         valeurAvant = 3\n  //         break;\n  //     }\n  //     try {\n  //       if (carte[position[0] - 1][position[1]] == valeurAvant) listeCasesAction.push([position[0] - 1, position[1], valeurAvant, valeurApres]) // TOP\n  //     } catch (error) { }\n  //     try {\n  //       if (carte[position[0]][position[1] + 1] == valeurAvant) listeCasesAction.push([position[0], position[1] + 1, valeurAvant, valeurApres]) // RIGHT\n  //     } catch (error) { }\n  //     try {\n  //       if (carte[position[0] + 1][position[1]] == valeurAvant) listeCasesAction.push([position[0] + 1, position[1], valeurAvant, valeurApres]) // BOTTOM\n  //     } catch (error) { }\n  //     try {\n  //       if (carte[position[0]][position[1] - 1] == valeurAvant) listeCasesAction.push([position[0], position[1] - 1, valeurAvant, valeurApres]) // LEFT\n  //     } catch (error) { }\n  //     setPropositionsCase(listeCasesAction)\n  //   } else {\n  //     setBtnClickedBottom(null)\n  //   }\n  // }\n  // const handleClicMarqueur = () => {\n  //   if (btnClickedBottom != 3) {\n  //     setBtnClickedBottom(3)\n  //     if (propositionMursDetruire[0].length > 0 || propositionMursDetruire[1].length > 0) {\n  //       setPropositionMursDetruire([[], []])\n  //     } else {\n  //       const mursADetruire = [1, 3, 5, 6]\n  //       var propositions = [\n  //         [],\n  //         []\n  //       ]\n  //       const mursAutour = getMursAutour()\n  //       try {\n  //         if (mursADetruire.includes(mursAutour[0])) propositions[0].push([position[1], position[0]]) // top\n  //         if (mursADetruire.includes(mursAutour[1])) propositions[1].push([position[1] + 1, position[0]]) // right\n  //         if (mursADetruire.includes(mursAutour[2])) propositions[0].push([position[1], position[0] + 1]) // bottom\n  //         if (mursADetruire.includes(mursAutour[3])) propositions[1].push([position[1], position[0]]) // left\n  //       } catch (error) {\n  //       }\n  //       setPropositionMursDetruire(propositions)\n  //     }\n  //   } else {\n  //     setBtnClickedBottom(null)\n  //   }\n  // }\n  // const handleClicValidated =async (bool) => {\n  //   if(bool){\n  //     const response =  await PlayAPI.nouveauTour(numPompier,carte,mursH,mursV,currentCycle,currentTour+1,resultats.Decedes,resultats.Sauves,session,equipe)      \n  //   }\n  // }\n  // const handleNoClicked = () => {\n  //   setPropositionMursDetruire([[], []])\n  //   setPropositionsCase([])\n  // }\n  // const handleClicHabitant = () => {\n  //   if (btnClickedBottom != 6) {\n  //     setBtnClickedBottom(6)\n  //     const valeurApres = 0\n  //     var listeCasesAction = []\n  //     try {\n  //       const valeurDessus =  carte[position[0] - 1][position[1]]\n  //       if (Math.floor(valeurDessus/10)==2) listeCasesAction.push([position[0] - 1, position[1], valeurDessus, valeurApres]) // TOP\n  //     } catch (error) { }\n  //     try {\n  //       const valeurDroite =  carte[position[0]][position[1] + 1]\n  //       if (Math.floor(valeurDroite/10)==2) listeCasesAction.push([position[0], position[1] + 1, valeurDroite, valeurApres]) // RIGHT\n  //     } catch (error) { }\n  //     try {\n  //       const valeurDessous =  carte[position[0] + 1][position[1]] \n  //       if (Math.floor(valeurDessous/10)==2)  listeCasesAction.push([position[0] + 1, position[1], valeurDessous, valeurApres]) // BOTTOM\n  //     } catch (error) { }\n  //     try {\n  //       const valeurGauche = carte[position[0]][position[1] - 1]\n  //       if (Math.floor(valeurGauche/10)==2) listeCasesAction.push([position[0], position[1] - 1, valeurGauche, valeurApres]) // LEFT\n  //     } catch (error) { }\n  //     setPropositionsCase(listeCasesAction)\n  //     console.log(\"handle clic habitant\")\n  //   } else {\n  //     setBtnClickedBottom(null)\n  //   }\n  // }\n  // console.log(carte.length,position)\n\n\n  const [vue, setVue] = useState(\"interventions\");\n\n  const handleViewChange = (event, newValue) => {\n    if (newValue != null) {\n      setVue(newValue);\n    }\n  };\n\n  useEffect(() => {\n    console.log(vue);\n  }, [vue]);\n  return carte.length > 0 && position != null ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [vue == \"operations\" ? /*#__PURE__*/_jsxDEV(Grille, {\n      nbColonnesGrille: nbColonnesGrille,\n      nbLignesGrille: nbLignesGrille,\n      carte: carte,\n      position: position,\n      mursH: mursH,\n      mursV: mursV\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 910,\n      columnNumber: 8\n    }, this) : null, vue == \"interventions\" ? /*#__PURE__*/_jsxDEV(InterInterventions, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 925,\n      columnNumber: 9\n    }, this) : null, /*#__PURE__*/_jsxDEV(BandeauTopInter // stocks={stocks}\n    , {\n      numeroPompier: numPompier,\n      numEquipe: equipe,\n      cycle: currentCycle,\n      tour: currentTour,\n      configuration: configuration // budget={budget}\n      ,\n      chrono: chrono,\n      handleViewChange: handleViewChange,\n      vue: vue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(BandeauBottomInter, {\n      numeroPompier: numPompier,\n      tour: currentTour,\n      resultats: resultats,\n      vue: vue\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 907,\n    columnNumber: 7\n  }, this) : null;\n};\n\n_s(InterfaceInter, \"k2SfnHDCAYKvpYclTvBo8xaKC5w=\", false, function () {\n  return [useHistory];\n});\n\n_c = InterfaceInter;\nexport default InterfaceInter;\n\nvar _c;\n\n$RefreshReg$(_c, \"InterfaceInter\");","map":{"version":3,"sources":["C:/Users/Hugo Dufrêne/decitude/client/src/routes/InterfaceInter.js"],"names":["React","useState","useEffect","useRef","PlayAPI","BandeauTopInter","BandeauBottomInter","Grille","InterInterventions","useHistory","cookie","InterfaceInter","console","log","history","user","load","numPompier","setNumPompier","currentTour","setCurrentTour","currentCycle","setCurrentCycle","session","setSession","equipe","setEquipe","chrono","setChrono","chronoTimer","setInterval","clearInterval","configuration","setConfiguration","chronoTour","valeur","nbSequences","nbCyclesParSequence","nbPompEquipe","resultats","setResultats","Decedes","Sauves","Marqueurs","isLoading","carte","setCarte","nbLignesGrille","setNbLignesGrille","nbColonnesGrille","setNbColonnesGrille","position","setPosition","mursH","setMursH","mursV","setMursV","getNombreMarqueurs","nbMarqueurs","forEach","ligne","length","getPlayParameters","test","vue","setVue","handleViewChange","event","newValue"],"mappings":"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,KAAK,CAAC,CAAD,CAAL,CAASgB,MAAT,GAAkB,CAAnC,CAAD,CAAX;AACD;AAEF,GARQ,EAQN,CAAChB,KAAD,CARM,CAAT;AAUA3C,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,OAAO,CAACC,GAAR,CAAYM,WAAZ;AACD,GAFQ,EAEN,CAACA,WAAD,CAFM,CAAT,CA5L2B,CAiM3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM2C,iBAAiB,GAAG,YAAY,CACpC;AACA;AAED,GAJD,CAzM2B,CA+M3B;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAwvBnD,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAHD,CAxY2B,CA6Y3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAIA;;;AAEA,QAAM,CAACmD,GAAD,EAAKC,MAAL,IAAahE,QAAQ,CAAC,eAAD,CAA3B;;AAEA,QAAMiE,gBAAgB,GAAC,CAACC,KAAD,EAAOC,QAAP,KAAkB;AACvC,QAAGA,QAAQ,IAAE,IAAb,EAAkB;AAChBH,MAAAA,MAAM,CAACG,QAAD,CAAN;AACD;AACF,GAJD;;AAKAlE,EAAAA,SAAS,CAAC,MAAI;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAYmD,GAAZ;AACD,GAFQ,EAEP,CAACA,GAAD,CAFO,CAAT;AAKA,SAEEnB,KAAK,CAACgB,MAAN,GAAe,CAAf,IAAoBV,QAAQ,IAAI,IAAhC,gBAEE;AAAA,eAECa,GAAG,IAAE,YAAL,gBACA,QAAC,MAAD;AACG,MAAA,gBAAgB,EAAEf,gBADrB;AAEG,MAAA,cAAc,EAAEF,cAFnB;AAGG,MAAA,KAAK,EAAEF,KAHV;AAIG,MAAA,QAAQ,EAAEM,QAJb;AAKG,MAAA,KAAK,EAAEE,KALV;AAMG,MAAA,KAAK,EAAEE;AANV;AAAA;AAAA;AAAA;AAAA,YADA,GASE,IAXH,EAgBES,GAAG,IAAE,eAAL,gBAEA,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YAFA,GAKC,IArBH,eAyBE,QAAC,eAAD,CACE;AADF;AAEE,MAAA,aAAa,EAAE/C,UAFjB;AAGE,MAAA,SAAS,EAAEQ,MAHb;AAIE,MAAA,KAAK,EAAEJ,YAJT;AAKE,MAAA,IAAI,EAAEF,WALR;AAME,MAAA,aAAa,EAAEa,aANjB,CAOE;AAPF;AAQE,MAAA,MAAM,EAAEL,MARV;AASE,MAAA,gBAAgB,EAAEuC,gBATpB;AAUE,MAAA,GAAG,EAAEF;AAVP;AAAA;AAAA;AAAA;AAAA,YAzBF,eAsCE,QAAC,kBAAD;AACE,MAAA,aAAa,EAAE/C,UADjB;AAEE,MAAA,IAAI,EAAEE,WAFR;AAGE,MAAA,SAAS,EAAEoB,SAHb;AAIE,MAAA,GAAG,EAAEyB;AAJP;AAAA;AAAA;AAAA;AAAA,YAtCF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,GA+CI,IAjDN;AAqDD,CA96BD;;GAAMrD,c;UAGYF,U;;;KAHZE,c;AAg7BN,eAAeA,cAAf","sourcesContent":["import \"../styles/App.css\"\r\nimport React, { useState, useEffect, useRef } from 'react'\r\nimport PlayAPI from \"../API/PlayAPI\"\r\nimport BandeauTopInter from \"../components/interfaceJoueur/BandeauTopInter\"\r\nimport BandeauBottomInter from \"../components/interfaceJoueur/BandeauBottomInter\"\r\nimport Grille from \"../components/interfaceJoueur/Grille\"\r\nimport InterInterventions from \"../components/interfaceJoueur/InterInterventions\"\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nimport cookie from 'react-cookies'\r\n\r\n\r\nconst InterfaceInter = () => {\r\n\r\n  console.log(\"interface inter\")\r\n  const history = useHistory()\r\n\r\n  const user = cookie.load(\"user\")\r\n  // console.log(user)\r\n  // if(user==null || user==undefined) history.push(\"/login\");\r\n\r\n\r\n\r\n  const [numPompier, setNumPompier] = useState(0)\r\n  // const [currentTour, setCurrentTour] = useState(null)\r\n  // const [currentCycle, setCurrentCycle] = useState(null)\r\n  const [currentTour, setCurrentTour] = useState(1)\r\n  const [currentCycle, setCurrentCycle] = useState(1)\r\n  // const [session,setSession]=useState(user.session)\r\n  // const [equipe,setEquipe]=useState(user.equipe)\r\n  const [session, setSession] = useState(1)\r\n  const [equipe, setEquipe] = useState(1)\r\n  const [chrono, setChrono] = useState(null)\r\n\r\n  useEffect(() => {\r\n    console.log(chrono)\r\n    if (currentTour == numPompier) {\r\n      if (chrono > 0) {\r\n\r\n        var chronoTimer = setInterval(() => {\r\n          setChrono(chrono => chrono - 1)\r\n\r\n        }, 1000)\r\n\r\n      }\r\n      return () => {\r\n        clearInterval(chronoTimer)\r\n      }\r\n    }\r\n  }, [chrono])\r\n\r\n\r\n\r\n  // const [configuration, setConfiguration] = useState(null)\r\n  const [configuration, setConfiguration] = useState( {\r\n    chronoTour:{valeur : 180},\r\n    nbSequences:{valeur : 4},\r\n    nbCyclesParSequence:{valeur : 2},\r\n    nbPompEquipe:{valeur:6}\r\n  })\r\n\r\n  useEffect(() => {\r\n    console.log(configuration)\r\n    if (configuration != null) {\r\n      setChrono(configuration.chronoTour.valeur)\r\n    }\r\n  }, [configuration])\r\n\r\n  // const [stocks, setStocks] = useState({\r\n  //   Interventions: 10,\r\n  //   Feu: 1,\r\n  //   FeuFum: 10,\r\n  //   Fum: 10,\r\n  //   Marqueur: 10,\r\n  // })\r\n\r\n  const [resultats, setResultats] = useState({\r\n    Decedes: 1,\r\n    Sauves: 2,\r\n    Marqueurs: 3\r\n  })\r\n\r\n  // const [interventions, setInterventions] = useState({\r\n  //   Deplacement: 0,\r\n  //   Feu: 0,\r\n  //   FeuFum: 0,\r\n  //   Fum: 0,\r\n  //   Marqueur: 0,\r\n  //   Porte: 0,\r\n  //   Habitant: 0\r\n  // })\r\n\r\n  // const [budget, setBudget] = useState(800)\r\n\r\n\r\n\r\n\r\n  const isLoading = useRef(false)\r\n\r\n  // INITIALISATION DE LA CARTE\r\n\r\n  const [carte, setCarte] = useState([\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  ])\r\n\r\n  // const [carte, setCarte] = useState([])\r\n\r\n  const [nbLignesGrille, setNbLignesGrille] = useState(0)\r\n  const [nbColonnesGrille, setNbColonnesGrille] = useState(0)\r\n  const [position, setPosition] = useState(null)\r\n\r\n\r\n  const [mursH, setMursH] = useState([\r\n    [1, 1, 1, 1, 1, 1, 2, 6, 1, 1, 1, 1, 2, 5, 1, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 2, 6, 1, 6, 2, 1, 1, 1, 5, 2, 1, 1],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [1, 1, 1, 1, 1, 1, 6, 2, 1, 1, 1, 1, 1, 1, 1, 1]\r\n  ])\r\n\r\n  const [mursV, setMursV] = useState([\r\n    [1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\r\n    [2, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\r\n    [5, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 0, 0, 1],\r\n    [1, 0, 0, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 2],\r\n    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 5]\r\n  ])\r\n\r\n\r\n  const getNombreMarqueurs = (mursH, mursV) => {\r\n    let nbMarqueurs = 0\r\n    mursH.forEach(ligne => {\r\n      ligne.forEach(valeur => {\r\n        if (valeur == 3) nbMarqueurs = nbMarqueurs + 1\r\n        if (valeur == 4) nbMarqueurs = nbMarqueurs + 2\r\n      })\r\n    })\r\n    mursV.forEach(ligne => {\r\n      ligne.forEach(valeur => {\r\n        if (valeur == 3) nbMarqueurs = nbMarqueurs + 1\r\n        if (valeur == 4) nbMarqueurs = nbMarqueurs + 2\r\n      })\r\n    })\r\n    return nbMarqueurs\r\n  }\r\n\r\n  // GET PLAY PARAMETERS \r\n  // const getPlayState=async(session,equipe)=>{\r\n  //   if(!isLoading.current){\r\n  //     isLoading.current=true\r\n  //     const currentPlayState = await PlayAPI.getPlayState(session,equipe)\r\n\r\n  //     if(Object.keys(currentPlayState).length>0 ){\r\n  //       // console.log(\"Get play state 2\")\r\n  //       console.log(parseInt(JSON.parse(currentPlayState.currentTour.valeur)))\r\n\r\n  //       setCurrentTour(parseInt(JSON.parse(currentPlayState.currentTour.valeur)))\r\n  //       setCurrentCycle(parseInt(JSON.parse(currentPlayState.currentCycle.valeur)))\r\n  //       const mursH=JSON.parse(currentPlayState.mursH.valeur)\r\n  //       const mursV=JSON.parse(currentPlayState.mursV.valeur)\r\n  //       setMursH(mursH)\r\n  //       setMursV(mursV)\r\n  //       setCarte(JSON.parse(currentPlayState.carte.valeur))\r\n  //       setResultats({\r\n  //         Decedes:parseInt(JSON.parse(currentPlayState.resultatsDecedes.valeur)),\r\n  //         Sauves:parseInt(JSON.parse(currentPlayState.resultatsSauves.valeur)),\r\n  //         Marqueurs:getNombreMarqueurs(mursH,mursV)\r\n  //       })\r\n  //     }\r\n  //     // getPositionFromCarte(JSON.parse(currentPlayState.carte.valeur))\r\n  //     isLoading.current=false\r\n  //   }\r\n\r\n  // }\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(carte)\r\n    if (carte.length > 0) {\r\n      setNbLignesGrille(carte.length)\r\n      setNbColonnesGrille(carte[0].length)\r\n      setPosition([carte.length+1, carte[0].length + 1])\r\n    }\r\n\r\n  }, [carte])\r\n\r\n  useEffect(() => {\r\n    console.log(currentTour)\r\n  }, [currentTour])\r\n\r\n\r\n  // useEffect(()=>{\r\n  //   if(session!=null && equipe!=null && currentTour==null){\r\n  //     // if(!isLoading.current) getPlayState(session,equipe)\r\n  //     // getPlayParameters()\r\n  //     // getPositionFromCarte()\r\n  //   }\r\n  // },[session,equipe,numPompier])\r\n\r\n  const getPlayParameters = async () => {\r\n    // const param = await PlayAPI.getConfiguration(session)\r\n    // setConfiguration(param)\r\n\r\n  }\r\n\r\n  // const getPositionFromCarte=(carte)=>{\r\n  //   console.log(carte)\r\n  //   if(carte!=null && carte.length>0){\r\n  //     carte.forEach((ligne,indexI) => {\r\n  //       ligne.forEach((valeur,indexJ) => {\r\n\r\n  //         if( Math.floor(valeur / 100) == 1 && valeur%100/10==numPompier) setPosition([indexI,indexJ])\r\n\r\n  //       })\r\n  //     });\r\n  //   }\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // // UPDATES\r\n  // const updateCarte = (coords, value) => {\r\n  //   if (coords[0] < nbLignesGrille && coords[1] < nbColonnesGrille) {\r\n  //     try {\r\n  //       var c = [...carte]\r\n  //       c[coords[0]][coords[1]] = value\r\n  //       setCarte(c)\r\n  //     } catch (error) {\r\n  //       console.log(error)\r\n  //     }\r\n  //   }\r\n\r\n\r\n  // }\r\n  // const updateMurH = (coords, value) => {\r\n  //   if (coords[0] < mursH.length && coords[1] < mursH[0].length) {\r\n  //     try {\r\n  //       var m = [...mursH]\r\n  //       m[coords[0]][coords[1]] = value\r\n  //       setMursH(m)\r\n\r\n  //     } catch (error) {\r\n  //       console.log(error)\r\n  //     }\r\n  //   }\r\n  // }\r\n  // const updateMurV = (coords, value) => {\r\n  //   if (coords[0] < mursV.length && coords[1] < mursV[0].length) {\r\n  //     try {\r\n  //       var m = [...mursV]\r\n  //       m[coords[0]][coords[1]] = value\r\n  //       setMursV(m)\r\n  //     } catch (error) {\r\n  //       console.log(error)\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // ACTIONS\r\n\r\n  // const updateBudget = (action) => {\r\n  //   var depenses = 0\r\n  //   if (configuration[\"coutEq\" + action] != null) depenses += configuration[\"coutEq\" + action].valeur\r\n  //   if (configuration[\"coutInter\" + action] != null) depenses += configuration[\"coutInter\" + action].valeur\r\n  //   setBudget(budget => budget - depenses)\r\n  // }\r\n\r\n\r\n  // const doAction = (action) => {\r\n  //   try {\r\n  //     if(Object.keys(stocks).includes(action)){\r\n  //       var s = stocks\r\n  //       s[action] = s[action] - 1\r\n  //       setStocks(s)\r\n  //     }\r\n\r\n  //   } catch (error) { }\r\n\r\n  //   try {\r\n  //     if(Object.keys(interventions).includes(action)){\r\n  //       var i = interventions\r\n  //     i[action] = i[action] - 1\r\n  //     setInterventions(i)\r\n  //     }      \r\n  //   } catch (error) { }\r\n\r\n  //   updateBudget(action)\r\n  // }\r\n\r\n  // const updateResultats = (sauve) => {\r\n  //   var res = resultats\r\n  //   if (sauve) {\r\n  //     res.nbSauves += 1\r\n  //   } else {\r\n  //     res.nbDecedes += 1\r\n  //   }\r\n  //   setResultats(res)\r\n  // }\r\n\r\n\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   setBtnClickedBottom(null)\r\n  //   revealHabitant()\r\n  // }, [position])\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if(carte.length>0) relacherHabitant()\r\n\r\n  // }, [position, mursH, mursV])\r\n\r\n\r\n\r\n\r\n  // // useEffect(() => {\r\n  // //   console.log(\"Stocks\")\r\n  // //   console.log(stocks)\r\n  // // }, [stocks])\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if (configuration != null) {\r\n  //     var inter = interventions\r\n  //     const interKeys = Object.keys(inter)\r\n  //     interKeys.forEach(action => {\r\n  //       try {\r\n  //         if (configuration[\"coutInter\" + action].valeur > 0) {\r\n  //           inter[action] = Math.min(\r\n  //             configuration[\"coutEq\" + action] != null && configuration[\"coutEq\" + action] != undefined ? Math.floor(budget / (configuration[\"coutInter\" + action].valeur + configuration[\"coutEq\" + action].valeur)) : Math.floor(budget / configuration[\"coutInter\" + action].valeur),\r\n  //             stocks[action] != null && stocks[action] != undefined && stocks[action] !=\"NaN\" ? stocks[action] : 1000\r\n  //           )\r\n  //         }\r\n  //       } catch (error) {\r\n  //         console.log(error,action)\r\n  //       }\r\n\r\n  //     })\r\n  //     setInterventions(inter)\r\n\r\n  //   } else {\r\n  //     // getPlayParameters()\r\n  //   }\r\n  // }, [budget, configuration, numPompier])\r\n\r\n  // SOCKETS\r\n  // const socket = PlayAPI.getSocket()\r\n\r\n  // // SOCKETS \r\n  // const onTourChange = async (e) => {\r\n  //   e.preventDefault()\r\n  //   console.log(\"nouveau tour todo\")\r\n  // }\r\n\r\n\r\n  // useEffect(() => {\r\n  //   socket.on('changementTour', (data) => {\r\n  //     console.log(\"socket nouveau tour\")\r\n  //     // setCurrentTour(data.numPompier + 1)\r\n  //     // getPlayState(session,equipe)\r\n  //   })\r\n  // });\r\n\r\n\r\n\r\n  // TESTS\r\n\r\n  const test = async () => {\r\n\r\n    console.log(\"test function\")\r\n  }\r\n\r\n  // const renderTests = () => {\r\n  //   return (\r\n  //     <div style={{ position: \"absolute\", top: 200 }}>\r\n  //       <div className=\"card\" style={{ flex: 1, flexDirection: \"column\" }}>\r\n  //         <form onSubmit={e => onTourChange(e)}>\r\n  //           <h1>Manual settings</h1>\r\n  //           <div className=\"name-field\">\r\n  //             <label htmlFor=\"numPompier\">Numéro pompier</label>\r\n  //             <input\r\n  //               type=\"number\"\r\n  //               name=\"numPompier\"\r\n  //               onChange={e => onTextChange(e)}\r\n  //               value={numPompier}\r\n  //               label=\"Numéro pompier\"\r\n  //             />\r\n  //           </div>\r\n  //           {currentTour == numPompier ?\r\n  //             <button>Fin du tour</button>\r\n  //             :\r\n  //             <button disabled>Fin du tour</button>\r\n\r\n  //           }\r\n\r\n  //         </form>\r\n\r\n  //       </div>\r\n  //       <div style={{ flex: 1, flexDirection: \"column\" }}>\r\n  //         <label htmlFor=\"numPompier\">Position x</label>\r\n  //         <input\r\n  //           type=\"number\"\r\n  //           name=\"xPompier\"\r\n  //           onChange={e => onXChange(e)}\r\n  //           value={position[1]}\r\n  //         />\r\n  //         <label htmlFor=\"numPompier\">Position y</label>\r\n  //         <input\r\n  //           type=\"number\"\r\n  //           name=\"yPompier\"\r\n  //           onChange={e => onYChange(e)}\r\n  //           value={position[0]}\r\n  //         />\r\n  //       </div>\r\n  //       <button onClick={() => test()} >test function</button>\r\n  //     </div>\r\n  //   )\r\n  // }\r\n\r\n\r\n\r\n\r\n  // AUTORISATIONS \r\n  // const deplacementAutorise = (deplacement) => {\r\n  //   // return true\r\n  //   var dpl = [...deplacement]\r\n  //   if (dpl[0] == 0 && dpl[1] == 0) return false\r\n  //   if (position[0] + dpl[0] > carte.length - 1 || position[1] + dpl[1] > carte[0].length - 1 || position[0] + dpl[0] < 0 || position[1] + dpl[1] < 0) return false\r\n\r\n\r\n  //   const dplInterditsCases = [100, 20, 3, 4]\r\n\r\n  //   try {\r\n  //     const valeurCaseDeplacement = carte[position[0] + dpl[0]][position[1] + dpl[1]]\r\n  //     if (Math.floor(valeurCaseDeplacement/100)==1) return false\r\n  //     if (Math.floor(valeurCaseDeplacement/10)==2) return false\r\n  //     if (dplInterditsCases.includes(valeurCaseDeplacement)) return false\r\n  //   } catch (error) { }\r\n\r\n  //   const dplInterditsMurs = [1, 2, 3, 5]\r\n  //   try {\r\n  //     if (dpl[0] != 0) { // haut bas\r\n  //       if (dpl[0] < 0) {\r\n  //         dpl[0] = 0\r\n  //       }\r\n  //       if (typeof (mursH[position[0] + dpl[0]][position[1]]) === 'undefined') return false\r\n  //       if (dplInterditsMurs.includes(mursH[position[0] + dpl[0]][position[1]])) return false\r\n  //     } else { // gauche droite\r\n  //       if (dpl[1] < 0) {\r\n  //         dpl[1] = 0\r\n  //       }\r\n  //       if (typeof (mursV[position[0]][position[1] + dpl[1]]) === 'undefined') return false\r\n  //       if (dplInterditsMurs.includes(mursV[position[0]][position[1] + dpl[1]])) return false\r\n  //     }\r\n  //   } catch (error) { }\r\n\r\n\r\n\r\n\r\n  //   return true\r\n  // }\r\n  // const testRelacherHabitant = () => {\r\n  //   if (carte[position[0]][position[1]]%10==0) return false // pas de transport d'habitant\r\n\r\n  //   const mursBloquants = [1, 2, 3, 5]\r\n\r\n  //   if (position[0] == 0 && !mursBloquants.includes(mursH[position[0]][position[1]])) return true // haut\r\n  //   if (position[0] == nbLignesGrille - 1 && !mursBloquants.includes(mursH[position[0] + 1][position[1]])) return true // bas\r\n\r\n  //   if (position[1] == 0 && !mursBloquants.includes(mursV[position[0]][position[1]])) return true // gauche\r\n  //   if (position[1] == nbColonnesGrille - 1 && !mursBloquants.includes(mursV[position[0]][position[1] + 1])) return true // droite\r\n\r\n  //   return false\r\n  // }\r\n  // const relacherHabitant = () => {\r\n  //   if (testRelacherHabitant()) {\r\n  //     setTimeout(() => {\r\n  //       updateResultats(true)\r\n  //       updateCarte(position, 100+numPompier*10)\r\n  //     }, 1000);\r\n  //   }\r\n  // }\r\n\r\n  // const revealHabitant=()=>{\r\n  //   if(configuration!=null){\r\n  //     const casesAutour = getCasesAutour()\r\n  //     console.log(configuration)\r\n  //     const nouvelHabitant = Math.random() <= configuration.txApparitionHab.valeur\r\n\r\n  //     try {\r\n  //       if(casesAutour.dessus==20) updateCarte([position[0]-1,position[1]], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\r\n  //     } catch (error) {}\r\n  //     try {\r\n  //       if(casesAutour.droite==20) updateCarte([position[0],position[1]+1], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\r\n  //     } catch (error) {}\r\n  //     try {\r\n  //       if(casesAutour.dessous==20) updateCarte([position[0]+1,position[1]], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\r\n  //     } catch (error) {}\r\n  //     try {\r\n  //       if(casesAutour.gauche==20) updateCarte([position[0],position[1]-1], nouvelHabitant ? 20+Math.floor(configuration.nbHabDifferents.valeur*Math.random())+1 : 0)\r\n  //     } catch (error) {}\r\n\r\n  //   }\r\n\r\n  // }\r\n\r\n  // const getCasesAutour = () => {\r\n  //   var cases = {}\r\n\r\n  //   try {\r\n  //     cases[\"dessus\"]=(carte[position[0] - 1][position[1]]) // dessus\r\n  //   } catch (error) { }\r\n  //   try {\r\n  //     cases[\"droite\"]=(carte[position[0]][position[1] + 1]) // droite\r\n  //   } catch (error) { }\r\n  //   try {\r\n  //     cases[\"dessous\"]=(carte[position[0] + 1][position[1]]) // dessous\r\n  //   } catch (error) { }\r\n  //   try {\r\n  //     cases[\"gauche\"]=(carte[position[0]][position[1] - 1]) // gauche\r\n  //   } catch (error) { }\r\n  //   return cases\r\n  // }\r\n  // const getMursAutour = () => {\r\n  //   var murs = []\r\n\r\n  //   try {\r\n  //     if (mursH[position[0]][position[1]] != 4 || (mursH[position[0]][position[1] - 1] < 6 && mursH[position[0]][position[1] + 1] < 6)) {\r\n  //       murs.push(mursH[position[0]][position[1]]) // dessus\r\n  //     } else {\r\n  //       murs.push(0)\r\n  //     }\r\n  //   } catch (error) { }\r\n\r\n  //   try {\r\n  //     if (mursV[position[0]][position[1] + 1] != 4 || (mursV[position[0] - 1][position[1] + 1] < 6 && mursV[position[0] + 1][position[1] + 1] < 6)) {\r\n  //       murs.push(mursV[position[0]][position[1] + 1])  // droite\r\n  //     } else {\r\n  //       murs.push(0)\r\n  //     }\r\n  //   } catch (error) { }\r\n\r\n  //   try {\r\n  //     if (mursH[position[0] + 1][position[1]] != 4 || (mursH[position[0] + 1][position[1] - 1] < 6 && mursH[position[0] + 1][position[1] + 1] < 6)) {\r\n  //       murs.push(mursH[position[0] + 1][position[1]]) // dessous\r\n  //     } else {\r\n  //       murs.push(0)\r\n  //     }\r\n\r\n  //   } catch (error) { }\r\n  //   try {\r\n  //     if (mursV[position[0]][position[1]] != 4 || (mursV[position[0] - 1][position[1]] < 6 && mursV[position[0] + 1][position[1]] < 6)) {\r\n  //       murs.push(mursV[position[0]][position[1]])  // gauche\r\n  //     } else {\r\n  //       murs.push(0)\r\n  //     }\r\n  //   } catch (error) { }\r\n  //   // console.log(murs)\r\n  //   return murs\r\n  // }\r\n\r\n\r\n\r\n\r\n  // const [btnClickedBottom, setBtnClickedBottom] = useState(null)\r\n  // const [propositionsCase, setPropositionsCase] = useState([]) // Extincteurs\r\n  // const [propositionMursDetruire, setPropositionMursDetruire] = useState([[], []]) // Horizontaux  , Verticaux\r\n  // useEffect(() => {\r\n  //   if (btnClickedBottom != 3 || btnClickedBottom == null) {\r\n  //     setPropositionMursDetruire([[], []])\r\n  //   }\r\n  //   if ((btnClickedBottom > 2 && btnClickedBottom < 6) || btnClickedBottom == null) {\r\n  //     setPropositionsCase([])\r\n  //   }\r\n  // }, [btnClickedBottom])\r\n\r\n\r\n\r\n\r\n  // HANDLERS CLIC GRILLE\r\n\r\n  // const handleClicCase = (valeurAvant, valeurApres, coordX, coordY) => {\r\n\r\n  //   console.log(valeurAvant, valeurApres, coordX, coordY)\r\n  //   try {\r\n  //     updateCarte([coordY, coordX], valeurApres)\r\n  //     setPropositionsCase([])\r\n  //     setBtnClickedBottom(null)\r\n\r\n  //     if (valeurAvant == 4 && valeurApres == 0) { // Extincteur flamme\r\n  //       doAction(\"Feu\")\r\n  //     }\r\n  //     if (valeurAvant == 4 && valeurApres == 3) { // Feu Fumée\r\n  //       doAction(\"FeuFum\")\r\n  //     }\r\n  //     if (valeurAvant == 3 && valeurApres == 0) { // Fumée\r\n  //       doAction(\"Fum\")\r\n  //     }\r\n  //     if (Math.floor(valeurAvant/10)==2 && valeurApres == 0) { // Habitant\r\n  //       doAction(\"Habitant\")\r\n  //       updateCarte(position, 100+numPompier*10+valeurAvant%10)\r\n  //     }\r\n  //   } catch (error) { }\r\n  // }\r\n\r\n  // const handleClicMur = (num, valeurAvant, coordX, coordY) => { // marqueur dégat\r\n  //   if (propositionMursDetruire[0].length > 0 || propositionMursDetruire[1].length > 0) {\r\n\r\n  //     const checkInCoords = (index) => {\r\n  //       // console.log(\"coordx\",coordX,\"coordy\",coordY,\"position\",position)\r\n\r\n  //       let numClic = null\r\n\r\n  //       if (coordX == position[1] && (coordY < position[0] || (coordY == position[0] && num == 0))) { // top\r\n  //         numClic = 0  // case en question\r\n  //         // console.log(\"top\",numClic)\r\n  //       }\r\n  //       if (coordX == position[1] && (coordY > position[0] || (coordY == position[0] && num == 2))) { // bottom\r\n  //         numClic = 2  // case en question\r\n  //         // console.log(\"bottom\",numClic)\r\n  //       }\r\n  //       if (coordY == position[0] && (coordX < position[1] || (coordX == position[1] && num == 3))) { // left\r\n  //         numClic = 3  // case en question\r\n  //         // console.log(\"left\",numClic)\r\n  //       }\r\n  //       if (coordY == position[0] && (coordX > position[1] || (coordX == position[1] && num == 1))) { // right\r\n  //         numClic = 1  // case en question\r\n  //         // console.log(\"right\",numClic)\r\n  //       }\r\n\r\n  //       return numClic\r\n  //     }\r\n\r\n  //     var cote = checkInCoords(num % 2)\r\n  //     let valeurApres = 4\r\n  //     if (valeurAvant == 1) valeurApres = 3\r\n\r\n  //     if (cote != null) {\r\n  //       try {\r\n  //         switch (cote) {\r\n  //           case 0:\r\n  //             updateMurH([position[0], position[1]], valeurApres)\r\n  //             // if(valeurAvant==5 ||)\r\n  //             break;\r\n  //           case 1:\r\n  //             updateMurV([position[0], position[1] + 1], valeurApres)\r\n  //             break;\r\n  //           case 2:\r\n  //             updateMurH([position[0] + 1, position[1]], valeurApres)\r\n  //             break;\r\n  //           case 3:\r\n  //             updateMurV([position[0], position[1]], valeurApres)\r\n  //             break;\r\n  //         }\r\n\r\n  //         doAction(\"Marqueur\")\r\n\r\n\r\n  //       } catch (error) {\r\n  //       }\r\n\r\n\r\n\r\n  //       setPropositionMursDetruire([[], []])\r\n  //       setBtnClickedBottom(null)\r\n  //     }\r\n\r\n  //   }\r\n\r\n  // }\r\n\r\n\r\n\r\n  // HANDLER CLICS BOUTONS\r\n\r\n\r\n  // const handleClicFleche = (num) => {\r\n  //   // Position y x\r\n  //   let deplacement\r\n  //   switch (num) {\r\n  //     case 0: // haut\r\n  //       console.log(\"haut\")\r\n  //       deplacement = [-1, 0]\r\n  //       break;\r\n\r\n  //     case 1: // droite\r\n  //       console.log(\"droite\")\r\n  //       deplacement = [0, 1]\r\n  //       break;\r\n\r\n  //     case 2: // bas\r\n  //       console.log(\"bas\")\r\n  //       deplacement = [1, 0]\r\n  //       break;\r\n\r\n  //     case 3: // gauche\r\n  //       console.log(\"gauche\")\r\n  //       deplacement = [0, -1]\r\n\r\n  //       break;\r\n  //   }\r\n  //   if (deplacementAutorise(deplacement)) {\r\n  //     updateCarte([position[0] + deplacement[0], position[1] + deplacement[1]], carte[position[0]][position[1]])\r\n  //     setPosition(position => [position[0] + deplacement[0], position[1] + deplacement[1]])\r\n  //     doAction(\"Deplacement\")\r\n  //     updateCarte(position, 0)\r\n  //   }\r\n  // }\r\n\r\n\r\n  // const handleClicDoor = (ouvrir) => { // position, ouvert/fermé\r\n  //   setBtnClickedBottom(ouvrir ? 4 : 5)\r\n  //   let valueAvant\r\n  //   let valueApres\r\n\r\n  //   if (ouvrir) {\r\n  //     valueAvant = 5\r\n  //     valueApres = 6\r\n\r\n  //   } else {\r\n  //     valueAvant = 6\r\n  //     valueApres = 5\r\n  //   }\r\n  //   doAction(\"Porte\")\r\n  //   try {\r\n  //     if (mursH[position[0]][position[1]] == valueAvant) updateMurH([position[0], position[1]], valueApres)\r\n  //     if (mursH[position[0] + 1][position[1]] == valueAvant) updateMurH([position[0] + 1, position[1]], valueApres)\r\n  //     if (mursV[position[0]][position[1]] == valueAvant) updateMurV([position[0], position[1]], valueApres)\r\n  //     if (mursV[position[0]][position[1] + 1] == valueAvant) updateMurV([position[0], position[1] + 1], valueApres)\r\n  //   } catch (error) {\r\n\r\n  //   }\r\n  // }\r\n\r\n  // const handleClicExtincteur = (num) => {\r\n  //   // 0 FEU, 1 FEUFUM, 2 FUM\r\n  //   if (btnClickedBottom != num) {\r\n  //     var listeCasesAction = []\r\n  //     let valeurAvant = 4\r\n  //     let valeurApres = 0\r\n  //     setBtnClickedBottom(num)\r\n  //     switch (num) {\r\n  //       case 0: // ETEINDRE FEU\r\n  //         break;\r\n\r\n  //       case 1: // FEU FUM\r\n  //         valeurApres = 3\r\n  //         break;\r\n  //       case 2: // ETEINDRE FUMEE\r\n  //         valeurAvant = 3\r\n  //         break;\r\n  //     }\r\n\r\n  //     try {\r\n  //       if (carte[position[0] - 1][position[1]] == valeurAvant) listeCasesAction.push([position[0] - 1, position[1], valeurAvant, valeurApres]) // TOP\r\n  //     } catch (error) { }\r\n  //     try {\r\n  //       if (carte[position[0]][position[1] + 1] == valeurAvant) listeCasesAction.push([position[0], position[1] + 1, valeurAvant, valeurApres]) // RIGHT\r\n  //     } catch (error) { }\r\n  //     try {\r\n  //       if (carte[position[0] + 1][position[1]] == valeurAvant) listeCasesAction.push([position[0] + 1, position[1], valeurAvant, valeurApres]) // BOTTOM\r\n  //     } catch (error) { }\r\n  //     try {\r\n  //       if (carte[position[0]][position[1] - 1] == valeurAvant) listeCasesAction.push([position[0], position[1] - 1, valeurAvant, valeurApres]) // LEFT\r\n  //     } catch (error) { }\r\n\r\n  //     setPropositionsCase(listeCasesAction)\r\n  //   } else {\r\n  //     setBtnClickedBottom(null)\r\n  //   }\r\n\r\n  // }\r\n\r\n  // const handleClicMarqueur = () => {\r\n  //   if (btnClickedBottom != 3) {\r\n  //     setBtnClickedBottom(3)\r\n  //     if (propositionMursDetruire[0].length > 0 || propositionMursDetruire[1].length > 0) {\r\n  //       setPropositionMursDetruire([[], []])\r\n  //     } else {\r\n  //       const mursADetruire = [1, 3, 5, 6]\r\n  //       var propositions = [\r\n  //         [],\r\n  //         []\r\n  //       ]\r\n  //       const mursAutour = getMursAutour()\r\n\r\n  //       try {\r\n  //         if (mursADetruire.includes(mursAutour[0])) propositions[0].push([position[1], position[0]]) // top\r\n  //         if (mursADetruire.includes(mursAutour[1])) propositions[1].push([position[1] + 1, position[0]]) // right\r\n  //         if (mursADetruire.includes(mursAutour[2])) propositions[0].push([position[1], position[0] + 1]) // bottom\r\n  //         if (mursADetruire.includes(mursAutour[3])) propositions[1].push([position[1], position[0]]) // left\r\n\r\n  //       } catch (error) {\r\n\r\n  //       }\r\n  //       setPropositionMursDetruire(propositions)\r\n\r\n  //     }\r\n  //   } else {\r\n  //     setBtnClickedBottom(null)\r\n  //   }\r\n\r\n\r\n  // }\r\n\r\n  // const handleClicValidated =async (bool) => {\r\n  //   if(bool){\r\n  //     const response =  await PlayAPI.nouveauTour(numPompier,carte,mursH,mursV,currentCycle,currentTour+1,resultats.Decedes,resultats.Sauves,session,equipe)      \r\n  //   }\r\n  // }\r\n\r\n  // const handleNoClicked = () => {\r\n  //   setPropositionMursDetruire([[], []])\r\n  //   setPropositionsCase([])\r\n  // }\r\n\r\n  // const handleClicHabitant = () => {\r\n  //   if (btnClickedBottom != 6) {\r\n  //     setBtnClickedBottom(6)\r\n  //     const valeurApres = 0\r\n  //     var listeCasesAction = []\r\n  //     try {\r\n  //       const valeurDessus =  carte[position[0] - 1][position[1]]\r\n  //       if (Math.floor(valeurDessus/10)==2) listeCasesAction.push([position[0] - 1, position[1], valeurDessus, valeurApres]) // TOP\r\n  //     } catch (error) { }\r\n  //     try {\r\n  //       const valeurDroite =  carte[position[0]][position[1] + 1]\r\n  //       if (Math.floor(valeurDroite/10)==2) listeCasesAction.push([position[0], position[1] + 1, valeurDroite, valeurApres]) // RIGHT\r\n  //     } catch (error) { }\r\n  //     try {\r\n  //       const valeurDessous =  carte[position[0] + 1][position[1]] \r\n  //       if (Math.floor(valeurDessous/10)==2)  listeCasesAction.push([position[0] + 1, position[1], valeurDessous, valeurApres]) // BOTTOM\r\n  //     } catch (error) { }\r\n  //     try {\r\n  //       const valeurGauche = carte[position[0]][position[1] - 1]\r\n  //       if (Math.floor(valeurGauche/10)==2) listeCasesAction.push([position[0], position[1] - 1, valeurGauche, valeurApres]) // LEFT\r\n  //     } catch (error) { }\r\n\r\n  //     setPropositionsCase(listeCasesAction)\r\n\r\n\r\n  //     console.log(\"handle clic habitant\")\r\n  //   } else {\r\n  //     setBtnClickedBottom(null)\r\n  //   }\r\n\r\n  // }\r\n\r\n\r\n\r\n  // console.log(carte.length,position)\r\n\r\n  const [vue,setVue]=useState(\"interventions\")\r\n\r\n  const handleViewChange=(event,newValue)=>{\r\n    if(newValue!=null){\r\n      setVue(newValue)\r\n    }\r\n  }\r\n  useEffect(()=>{\r\n    console.log(vue)\r\n  },[vue])\r\n\r\n\r\n  return (\r\n\r\n    carte.length > 0 && position != null ?\r\n\r\n      <div>\r\n       { \r\n       vue==\"operations\" ? \r\n       <Grille\r\n          nbColonnesGrille={nbColonnesGrille}\r\n          nbLignesGrille={nbLignesGrille}\r\n          carte={carte}\r\n          position={position}\r\n          mursH={mursH}\r\n          mursV={mursV}\r\n        />\r\n       : null\r\n       }\r\n\r\n\r\n       {\r\n        vue==\"interventions\" ? \r\n\r\n        <InterInterventions\r\n\r\n        />\r\n        :null\r\n       }\r\n        \r\n\r\n        <BandeauTopInter\r\n          // stocks={stocks}\r\n          numeroPompier={numPompier}\r\n          numEquipe={equipe}\r\n          cycle={currentCycle}\r\n          tour={currentTour}\r\n          configuration={configuration}\r\n          // budget={budget}\r\n          chrono={chrono}\r\n          handleViewChange={handleViewChange}\r\n          vue={vue}\r\n        />\r\n\r\n        <BandeauBottomInter\r\n          numeroPompier={numPompier}\r\n          tour={currentTour}\r\n          resultats={resultats}\r\n          vue={vue}\r\n        />\r\n      </div>\r\n      : null\r\n\r\n  );\r\n\r\n}\r\n\r\nexport default InterfaceInter;\r\n\r\n"]},"metadata":{},"sourceType":"module"}