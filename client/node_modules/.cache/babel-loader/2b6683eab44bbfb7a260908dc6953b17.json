{"ast":null,"code":"const urlBack = \"https://www.back.leaders-extreme.fr\";\nexport default {\n  startStopPartie: async (socket, session, start) => {\n    // console.log(\"start/stop partie\")\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        start: start\n      })\n    };\n    fetch(urlBack + \"/startStopPartie\", requestOptions) // .then((response) => {\n    //     console.log(\"test\")\n    //     return response.json();\n    // })\n    .then(() => {\n      socket.emit('startStopPartie', {\n        start: start\n      });\n    });\n  },\n  nouveauTour: async (socket, currentPomp, carte, mursH, mursV, currentSequence, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe, chrono) => {\n    // console.log(\"nouveau tour\")\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        carte: carte,\n        mursH: mursH,\n        mursV: mursV,\n        currentPomp: currentPomp,\n        currentSequence: currentSequence,\n        currentCycle: currentCycle,\n        currentTour: currentTour,\n        resultatsDecedes: resultatsDecedes,\n        resultatsSauves: resultatsSauves,\n        session: session,\n        equipe: equipe,\n        currrentChrono: chrono\n      })\n    };\n    fetch(urlBack + \"/nouveauTour\", requestOptions) // .then((response) => {\n    //     console.log(\"test\")\n    //     return response.json();\n    // })\n    .then(() => {\n      socket.emit('changementTour', {\n        currentSequence: parseInt(currentSequence),\n        currentPomp: parseInt(currentPomp),\n        currentTour: parseInt(currentTour),\n        currentCycle: parseInt(currentCycle)\n      }); // console.log(\"changement tour\")\n    });\n  },\n  // getSocket: () => {\n  //     return socket\n  // },\n  getConfiguration: async session => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session\n      })\n    };\n    const response = await fetch(urlBack + \"/configuration\", requestOptions);\n    return await response.json();\n  },\n  getPlayState: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/playstate\", requestOptions);\n    return await response.json();\n  },\n  revealHabitant: async (socket, position, type) => {\n    // console.log(position[0])\n    socket.emit('revealHabitant', {\n      y: parseInt(position[0]),\n      x: parseInt(position[1]),\n      type: parseInt(type)\n    }); // console.log(\"socket emit\")\n  },\n  saveBudgetsPompInit: async (cycles, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cycles: cycles,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/saveBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  saveBudgetsPompFin: async (budgetsFin, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        budgetsFin: budgetsFin,\n        session: session,\n        equipe: equipe\n      })\n    }; // console.log(\"budgets fin\")\n\n    const response = await fetch(urlBack + \"/saveBudgetsPompFin\", requestOptions); // console.log(\"save budgets fin\")\n\n    return response;\n  },\n  getBudgetsPompInit: async (session, equipe, numPompier, currentCycle, currentSequence) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe,\n        numPompier: numPompier,\n        cycle: currentCycle,\n        sequence: currentSequence\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  getBudgetsPompFin: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompFin\", requestOptions);\n    return await response.json();\n  },\n  updateCurrentChrono: async (chrono, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        chrono: chrono,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/updateChrono\", requestOptions);\n    return await response.json();\n  }\n};","map":{"version":3,"sources":["C:/Users/hugod/decitude/client/src/API/PlayAPI.js"],"names":["urlBack","startStopPartie","socket","session","start","requestOptions","method","headers","body","JSON","stringify","fetch","then","emit","nouveauTour","currentPomp","carte","mursH","mursV","currentSequence","currentCycle","currentTour","resultatsDecedes","resultatsSauves","equipe","chrono","currrentChrono","parseInt","getConfiguration","response","json","getPlayState","revealHabitant","position","type","y","x","saveBudgetsPompInit","cycles","saveBudgetsPompFin","budgetsFin","getBudgetsPompInit","numPompier","cycle","sequence","getBudgetsPompFin","updateCurrentChrono"],"mappings":"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","sourcesContent":["\n\n\n\nconst urlBack = \"https://www.back.leaders-extreme.fr\";\nexport default {\n    startStopPartie: async (socket,session,start) => {\n        // console.log(\"start/stop partie\")\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session:session,\n                start:start\n            })\n        };\n\n\n        fetch(urlBack + \"/startStopPartie\", requestOptions)\n            // .then((response) => {\n            //     console.log(\"test\")\n            //     return response.json();\n            // })\n            .then(() => {\n                socket.emit(\n                    'startStopPartie',\n                    {\n                        start: start,\n                    }\n                )\n            })\n        \n\n    },\n    nouveauTour: async (socket,currentPomp, carte, mursH, mursV, currentSequence, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe, chrono) => {\n        // console.log(\"nouveau tour\")\n        \n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                carte: carte,\n                mursH: mursH,\n                mursV: mursV,\n                currentPomp: currentPomp,\n                currentSequence: currentSequence,\n                currentCycle: currentCycle,\n                currentTour: currentTour,\n                resultatsDecedes: resultatsDecedes,\n                resultatsSauves: resultatsSauves,\n                session: session,\n                equipe: equipe,\n                currrentChrono: chrono\n            })\n        };\n\n\n        fetch(urlBack + \"/nouveauTour\", requestOptions)\n            // .then((response) => {\n            //     console.log(\"test\")\n            //     return response.json();\n            // })\n            .then(() => {\n                socket.emit(\n                    'changementTour',\n                    {\n                        currentSequence: parseInt(currentSequence),\n                        currentPomp: parseInt(currentPomp),\n                        currentTour: parseInt(currentTour),\n                        currentCycle: parseInt(currentCycle),\n                    }\n                )\n                // console.log(\"changement tour\")\n            })\n\n    },\n    // getSocket: () => {\n    //     return socket\n    // },\n    getConfiguration: async (session) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ session: session })\n        };\n        const response = await fetch(urlBack + \"/configuration\", requestOptions)\n        return await response.json()\n    },\n    getPlayState: async (session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe\n            })\n        };\n        const response = await fetch(urlBack + \"/playstate\", requestOptions)\n        return await response.json()\n    },\n    revealHabitant: async (socket,position, type) => {\n        // console.log(position[0])\n        socket.emit(\n            'revealHabitant',\n            {\n                y: parseInt(position[0]),\n                x: parseInt(position[1]),\n                type: parseInt(type)\n            }\n        )\n        // console.log(\"socket emit\")\n    },\n    saveBudgetsPompInit: async (cycles, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                cycles: cycles,\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/saveBudgetsPompInit\", requestOptions)\n\n\n        return await response.json()\n    },\n    saveBudgetsPompFin: async (budgetsFin, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                budgetsFin: budgetsFin,\n                session: session,\n                equipe: equipe\n            })\n        };\n        // console.log(\"budgets fin\")\n\n        const response = await fetch(urlBack + \"/saveBudgetsPompFin\", requestOptions)\n        // console.log(\"save budgets fin\")\n        return response\n    },\n    getBudgetsPompInit: async (session, equipe, numPompier, currentCycle, currentSequence) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe,\n                numPompier: numPompier,\n                cycle: currentCycle,\n                sequence: currentSequence\n            })\n        };\n\n        const response = await fetch(urlBack + \"/getBudgetsPompInit\", requestOptions)\n\n\n        return await response.json()\n    },\n    getBudgetsPompFin: async (session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/getBudgetsPompFin\", requestOptions)\n\n\n        return await response.json()\n    },\n    updateCurrentChrono: async (chrono, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                chrono: chrono,\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/updateChrono\", requestOptions)\n\n        return await response.json()\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}