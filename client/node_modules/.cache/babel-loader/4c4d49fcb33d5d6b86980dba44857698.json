{"ast":null,"code":"import io from 'socket.io-client';\nconst urlBack = \"http://localhost:4000\";\nconst socket = io.connect(urlBack);\nexport default {\n  startStopPartie: async start => {\n    console.log(\"start/stop partie\");\n    socket.emit('startStopPartie', {\n      start: start\n    });\n  },\n  nouveauTour: async (currentPomp, carte, mursH, mursV, currentSequence, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe, chrono) => {\n    console.log(\"nouveau tour\");\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        carte: carte,\n        mursH: mursH,\n        mursV: mursV,\n        currentPomp: currentPomp,\n        currentSequence: currentSequence,\n        currentCycle: currentCycle,\n        currentTour: currentTour,\n        resultatsDecedes: resultatsDecedes,\n        resultatsSauves: resultatsSauves,\n        session: session,\n        equipe: equipe,\n        currrentChrono: chrono\n      })\n    };\n    const response = fetch(urlBack + \"/nouveauTour\", requestOptions).then(response => {\n      if (response.ok) {\n        console.log('success');\n        console.log(response);\n      } else {\n        console.log('failure');\n      }\n\n      return response.json();\n    }); // .then(() => {\n    //     socket.emit(\n    //         'changementTour',\n    //         {\n    //             currentSequence: parseInt(currentSequence),\n    //             currentPomp: parseInt(currentPomp),\n    //             currentTour: parseInt(currentTour),\n    //             currentCycle: parseInt(currentCycle),\n    //         }\n    //     )\n    //     console.log(\"changement tour\")\n    // })\n  },\n  getSocket: () => {\n    return socket;\n  },\n  getConfiguration: async session => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session\n      })\n    };\n    const response = await fetch(urlBack + \"/configuration\", requestOptions);\n    return await response.json();\n  },\n  getPlayState: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/playstate\", requestOptions);\n    return await response.json();\n  },\n  revealHabitant: async (position, type) => {\n    // console.log(position[0])\n    socket.emit('revealHabitant', {\n      y: parseInt(position[0]),\n      x: parseInt(position[1]),\n      type: parseInt(type)\n    });\n    console.log(\"socket emit\");\n  },\n  saveBudgetsPompInit: async (cycles, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cycles: cycles,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/saveBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  saveBudgetsPompFin: async (budgetsFin, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        budgetsFin: budgetsFin,\n        session: session,\n        equipe: equipe\n      })\n    }; // console.log(\"budgets fin\")\n\n    const response = await fetch(urlBack + \"/saveBudgetsPompFin\", requestOptions);\n    console.log(\"save budgets fin\");\n    return response;\n  },\n  getBudgetsPompInit: async (session, equipe, numPompier, currentCycle, currentSequence) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe,\n        numPompier: numPompier,\n        cycle: currentCycle,\n        sequence: currentSequence\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompInit\", requestOptions);\n    return await response.json();\n  },\n  getBudgetsPompFin: async (session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/getBudgetsPompFin\", requestOptions);\n    return await response.json();\n  },\n  updateCurrentChrono: async (chrono, session, equipe) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        chrono: chrono,\n        session: session,\n        equipe: equipe\n      })\n    };\n    const response = await fetch(urlBack + \"/updateChrono\", requestOptions);\n    return await response.json();\n  }\n};","map":{"version":3,"sources":["C:/Users/hugod/decitude/client/src/API/PlayAPI.js"],"names":["io","urlBack","socket","connect","startStopPartie","start","console","log","emit","nouveauTour","currentPomp","carte","mursH","mursV","currentSequence","currentCycle","currentTour","resultatsDecedes","resultatsSauves","session","equipe","chrono","requestOptions","method","headers","body","JSON","stringify","currrentChrono","response","fetch","then","ok","json","getSocket","getConfiguration","getPlayState","revealHabitant","position","type","y","parseInt","x","saveBudgetsPompInit","cycles","saveBudgetsPompFin","budgetsFin","getBudgetsPompInit","numPompier","cycle","sequence","getBudgetsPompFin","updateCurrentChrono"],"mappings":"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","sourcesContent":["\nimport io from 'socket.io-client'\n\nconst urlBack = \"http://localhost:4000\";\nconst socket = io.connect(urlBack)\n\nexport default {\n    startStopPartie: async (start) => {\n        console.log(\"start/stop partie\")\n\n        socket.emit(\n            'startStopPartie',\n            {\n                start: start,\n            }\n        )\n\n    },\n    nouveauTour: async (currentPomp, carte, mursH, mursV, currentSequence, currentCycle, currentTour, resultatsDecedes, resultatsSauves, session, equipe, chrono) => {\n        console.log(\"nouveau tour\")\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                carte: carte,\n                mursH: mursH,\n                mursV: mursV,\n                currentPomp: currentPomp,\n                currentSequence: currentSequence,\n                currentCycle: currentCycle,\n                currentTour: currentTour,\n                resultatsDecedes: resultatsDecedes,\n                resultatsSauves: resultatsSauves,\n                session: session,\n                equipe: equipe,\n                currrentChrono: chrono\n            })\n        };\n\n\n        const response = fetch(urlBack + \"/nouveauTour\", requestOptions)\n            .then((response) => {\n                if (response.ok) {\n                    console.log('success')\n                    console.log(response);\n                } else {\n                    console.log('failure')\n                }\n                return response.json();\n            })\n            // .then(() => {\n            //     socket.emit(\n            //         'changementTour',\n            //         {\n            //             currentSequence: parseInt(currentSequence),\n            //             currentPomp: parseInt(currentPomp),\n            //             currentTour: parseInt(currentTour),\n            //             currentCycle: parseInt(currentCycle),\n            //         }\n            //     )\n            //     console.log(\"changement tour\")\n            // })\n\n    },\n    getSocket: () => {\n        return socket\n    },\n    getConfiguration: async (session) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ session: session })\n        };\n        const response = await fetch(urlBack + \"/configuration\", requestOptions)\n        return await response.json()\n    },\n    getPlayState: async (session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe\n            })\n        };\n        const response = await fetch(urlBack + \"/playstate\", requestOptions)\n        return await response.json()\n    },\n    revealHabitant: async (position, type) => {\n        // console.log(position[0])\n        socket.emit(\n            'revealHabitant',\n            {\n                y: parseInt(position[0]),\n                x: parseInt(position[1]),\n                type: parseInt(type)\n            }\n        )\n        console.log(\"socket emit\")\n    },\n    saveBudgetsPompInit: async (cycles, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                cycles: cycles,\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/saveBudgetsPompInit\", requestOptions)\n\n\n        return await response.json()\n    },\n    saveBudgetsPompFin: async (budgetsFin, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                budgetsFin: budgetsFin,\n                session: session,\n                equipe: equipe\n            })\n        };\n        // console.log(\"budgets fin\")\n\n        const response = await fetch(urlBack + \"/saveBudgetsPompFin\", requestOptions)\n        console.log(\"save budgets fin\")\n        return response\n    },\n    getBudgetsPompInit: async (session, equipe, numPompier, currentCycle, currentSequence) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe,\n                numPompier: numPompier,\n                cycle: currentCycle,\n                sequence: currentSequence\n            })\n        };\n\n        const response = await fetch(urlBack + \"/getBudgetsPompInit\", requestOptions)\n\n\n        return await response.json()\n    },\n    getBudgetsPompFin: async (session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/getBudgetsPompFin\", requestOptions)\n\n\n        return await response.json()\n    },\n    updateCurrentChrono: async (chrono, session, equipe) => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                chrono: chrono,\n                session: session,\n                equipe: equipe\n            })\n        };\n\n        const response = await fetch(urlBack + \"/updateChrono\", requestOptions)\n\n        return await response.json()\n    }\n\n};\n"]},"metadata":{},"sourceType":"module"}